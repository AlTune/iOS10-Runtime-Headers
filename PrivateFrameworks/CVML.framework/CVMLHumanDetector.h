/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/CVML.framework/CVML
 */

@interface CVMLHumanDetector : CVMLDetector {
    struct TemplateObjectDetectorApply { int x1; int x2; int x3; int x4; bool x5; float x6[2]; float x7[2]; float x8; bool x9; bool x10; float x11; float x12; int x13; float x14; struct hog { struct gradient { } x_15_1_1; } x15; struct ChnsFeat { int x_16_1_1; int x_16_1_2; struct hog { struct gradient { } x_3_2_1; } x_16_1_3; struct gradient { } x_16_1_4; } x16; int x17; struct vector<vision::hum::DTreeApply, std::__1::allocator<vision::hum::DTreeApply> > { struct DTreeApply {} *x_18_1_1; struct DTreeApply {} *x_18_1_2; struct __compressed_pair<vision::hum::DTreeApply *, std::__1::allocator<vision::hum::DTreeApply> > { struct DTreeApply {} *x_3_2_1; } x_18_1_3; } x18; struct vector<std::__1::map<int, vision::hum::DTreeNode, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, vision::hum::DTreeNode> > >, std::__1::allocator<std::__1::map<int, vision::hum::DTreeNode, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, vision::hum::DTreeNode> > > > > { struct map<int, vision::hum::DTreeNode, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, vision::hum::DTreeNode> > > {} *x_19_1_1; struct map<int, vision::hum::DTreeNode, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, vision::hum::DTreeNode> > > {} *x_19_1_2; struct __compressed_pair<std::__1::map<int, vision::hum::DTreeNode, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, vision::hum::DTreeNode> > > *, std::__1::allocator<std::__1::map<int, vision::hum::DTreeNode, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, vision::hum::DTreeNode> > > > > { struct map<int, vision::hum::DTreeNode, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, vision::hum::DTreeNode> > > {} *x_3_2_1; } x_19_1_3; } x19; struct vector<float, std::__1::allocator<float> > { float *x_20_1_1; float *x_20_1_2; struct __compressed_pair<float *, std::__1::allocator<float> > { float *x_3_2_1; } x_20_1_3; } x20; struct vector<vision::hum::DTreeNode *, std::__1::allocator<vision::hum::DTreeNode *> > { struct DTreeNode {} **x_21_1_1; struct DTreeNode {} **x_21_1_2; struct __compressed_pair<vision::hum::DTreeNode **, std::__1::allocator<vision::hum::DTreeNode *> > { struct DTreeNode {} **x_3_2_1; } x_21_1_3; } x21; float x22; struct adaBoostApply { struct vector<vision::hum::DTreeApply, std::__1::allocator<vision::hum::DTreeApply> > { struct DTreeApply {} *x_1_2_1; struct DTreeApply {} *x_1_2_2; struct __compressed_pair<vision::hum::DTreeApply *, std::__1::allocator<vision::hum::DTreeApply> > { struct DTreeApply {} *x_3_3_1; } x_1_2_3; } x_23_1_1; } x23; struct linearSVMApply { struct vector<float, std::__1::allocator<float> > { float *x_1_2_1; float *x_1_2_2; struct __compressed_pair<float *, std::__1::allocator<float> > { float *x_3_3_1; } x_1_2_3; } x_24_1_1; float x_24_1_2; struct vector<float, std::__1::allocator<float> > { float *x_3_2_1; float *x_3_2_2; struct __compressed_pair<float *, std::__1::allocator<float> > { float *x_3_3_1; } x_3_2_3; } x_24_1_3; } x24; id x25; /* Warning: Unrecognized filer type: '' using 'void*' */ void*x26; void*x27; void*x28; void*x29; void*x30; void*x31; void*x32; void*x33; void*x34; void*x35; void*x36; void*x37; void*x38; void*x39; void*x40; void*x41; void*x42; void*x43; void*x44; void*x45; void*x46; void x47; out int x48; double x49; char *x50; void*x51; void*x52; void*x53; void*x54; void*x55; void*x56; void x57; out int x58; double x59; char *x60; void*x61; void*x62; void*x63; void*x64; void*x65; void*x66; void x67; out int x68; double x69; char *x70; void*x71; void*x72; void*x73; void*x74; void*x75; void*x76; void x77; out int x78; double x79; char *x80; void*x81; void*x82; void*x83; void*x84; void*x85; void*x86; void x87; out int x88; double x89; char *x90; void*x91; void*x92; void*x93; void*x94; void*x95; void*x96; void x97; out int x98; double x99; char *x100; void*x101; void*x102; void*x103; void*x104; void*x105; void*x106; void x107; out int x108; double x109; char *x110; void*x111; void*x112; void*x113; void*x114; void*x115; void*x116; void x117; void*x118; void*x119; void*x120; void*x121; void*x122; void*x123; void*x124; void*x125; void*x126; void*x127; void x128; out int x129; double x130; char *x131; void*x132; void*x133; void*x134; void*x135; void*x136; void*x137; void x138; out int x139; double x140; char *x141; void*x142; void*x143; void*x144; void*x145; void*x146; void*x147; void x148; out int x149; double x150; char *x151; void*x152; void*x153; void*x154; void*x155; void*x156; void*x157; void x158; out int x159; double x160; char *x161; void*x162; void*x163; void*x164; void*x165; void*x166; void*x167; void x168; out int x169; double x170; char *x171; void*x172; void*x173; void*x174; void*x175; void*x176; void*x177; void*x178; void*x179; void*x180; void*x181; void*x182; void*x183; void*x184; void*x185; void*x186; void*x187; void*x188; void x189; out int x190; double x191; char *x192; void*x193; void*x194; void*x195; void*x196; void*x197; void*x198; void x199; out int x200; double x201; char *x202; void*x203; void*x204; void*x205; void*x206; void*x207; void*x208; void x209; out int x210; double x211; char *x212; void*x213; void*x214; void*x215; void*x216; void*x217; void*x218; void x219; out int x220; double x221; char *x222; void*x223; void*x224; void*x225; void*x226; void*x227; void*x228; void x229; out int x230; double x231; char *x232; void*x233; void*x234; void*x235; void*x236; void*x237; void*x238; void*x239; void*x240; void*x241; void*x242; void*x243; void*x244; void*x245; void*x246; void*x247; void*x248; void*x249; void*x250; void*x251; void*x252; void*x253; void*x254; void*x255; void*x256; void*x257; void*x258; void*x259; void*x260; void*x261; void*x262; void*x263; void*x264; void*x265; void*x266; void*x267; void*x268; void*x269; void*x270; void*x271; void*x272; void*x273; void*x274; void*x275; void*x276; void*x277; void*x278; void*x279; void*x280; void*x281; void*x282; void*x283; out int x284; double x285; char *x286; void*x287; void*x288; void*x289; void*x290; void*x291; void*x292; void x293; out int x294; double x295; char *x296; void*x297; void*x298; void*x299; void*x300; void*x301; void*x302; void x303; out int x304; void*x305; void*x306; void*x307; void*x308; void*x309; void*x310; void*x311; void*x312; void*x313; void*x314; int x315; double x316; char *x317; void*x318; void*x319; void*x320; void*x321; void*x322; void*x323; void x324; out int x325; double x326; char *x327; void*x328; void*x329; void*x330; void*x331; void*x332; void*x333; void x334; out int x335; double x336; char *x337; void*x338; void*x339; void*x340; void*x341; void*x342; void*x343; void x344; out int x345; double x346; char *x347; void*x348; void*x349; void*x350; void*x351; void*x352; void*x353; void x354; out int x355; double x356; char *x357; void*x358; void*x359; void*x360; void*x361; void*x362; void*x363; void x364; void*x365; void*x366; void*x367; void*x368; void*x369; void*x370; void*x371; void*x372; void*x373; void*x374; void x375; out int x376; double x377; char *x378; void*x379; void*x380; void*x381; void*x382; void*x383; void*x384; void x385; out int x386; double x387; char *x388; void*x389; void*x390; void*x391; void*x392; void*x393; void*x394; void*x395; void*x396; void*x397; void*x398; void*x399; void*x400; void*x401; void*x402; void*x403; void*x404; void*x405; void*x406; void*x407; void*x408; void*x409; void*x410; void*x411; void*x412; void*x413; void*x414; void*x415; void*x416; void*x417; void*x418; void*x419; void*x420; void*x421; void*x422; void*x423; void*x424; void*x425; void*x426; int x427; void*x428; in void*x429; void*x430; void*x431; void*x432; void*x433; void*x434; void*x435; void*x436; void*x437; void*x438; void*x439; void*x440; void*x441; int x442; void*x443; in void*x444; void*x445; void*x446; void*x447; void*x448; void*x449; void*x450; void*x451; void*x452; void*x453; void*x454; void*x455; void*x456; unsigned int x457/* : ? */; void*x458; out void*x459; out void*x460; long x461; void*x462; void*x463; void*x464; void*x465; void*x466; void*x467; void*x468; void*x469; void*x470; void*x471; void*x472; float x473; void*x474; long x475; void*x476; out void*x477; void*x478; void*x479; void*x480; void*x481; void*x482; void*x483; void*x484; void*x485; void*x486; void*x487; void* x488[ /* ? */ ]; void*x489; void*x490; void*x491; void*x492; void*x493; void*x494; void*x495; void*x496; void*x497; float x498; void*x499; long x500; void*x501; out void*x502; void*x503; void*x504; void*x505; void*x506; void*x507; void*x508; void*x509; void*x510; void*x511; void*x512; void* x513[ /* ? */ ]; void*x514; void*x515; void*x516; void*x517; void*x518; void*x519; void*x520; void*x521; void*x522; float x523; void*x524; long x525; void*x526; out void*x527; void*x528; void*x529; void*x530; void*x531; void*x532; void*x533; void*x534; void*x535; void*x536; void*x537; void*x538; void*x539; void*x540; void*x541; unsigned int x542/* : ? */; void*x543; out void*x544; out void*x545; long x546; void*x547; void*x548; void*x549; void*x550; void*x551; void*x552; void*x553; void*x554; void*x555; void*x556; void*x557; unsigned int x558/* : ? */; void*x559; out void*x560; out void*x561; long x562; void*x563; void*x564; void*x565; void*x566; void*x567; void*x568; void*x569; void*x570; void*x571; void*x572; void*x573; void*x574; void*x575; float x576; void*x577; long x578; void*x579; out void*x580; void*x581; void*x582; void*x583; void*x584; void*x585; void*x586; void*x587; void*x588; void*x589; void*x590; void*x591; void*x592; void*x593; void*x594; void*x595; void*x596; float x597; void*x598; long x599; void*x600; out void*x601; void*x602; void*x603; void*x604; void*x605; void*x606; void*x607; void*x608; void*x609; void*x610; void*x611; void*x612; void*x613; void*x614; void*x615; void*x616; void*x617; int x618; void*x619; in void*x620; void*x621; void*x622; void*x623; void*x624; void*x625; void*x626; void*x627; void*x628; void*x629; void*x630; void*x631; void*x632; void*x633; void*x634; float x635; void*x636; long x637; void*x638; out void*x639; void*x640; void*x641; void*x642; void*x643; void*x644; void*x645; void*x646; void*x647; void*x648; void*x649; void*x650; void*x651; void*x652; void*x653; void*x654; void*x655; short x656; void*x657; void*x658; void*x659; const void*x660; void*x661; void*x662; BOOL x663; void*x664; void*x665; void*x666; void*x667; void*x668; void*x669; void*x670; out void*x671; void*x672; void*x673; void*x674; void*x675; struct x676; void*x677; void*x678; void*x679; short x680; void*x681; void*x682; void*x683; const void*x684; void*x685; void*x686; BOOL x687; void*x688; void*x689; void*x690; void*x691; void*x692; void*x693; void*x694; const void*x695; void*x696; void*x697; double x698; void*x699; int x700; void*x701; void*x702; void*x703; in void*x704; void*x705; void*x706; void*x707; void*x708; struct x709; void*x710; void*x711; void*x712; } * mHumanDetectorAlgorithmImpl_;
}

- (void)dealloc;
- (id)initWithOptions:(id)arg1 error:(id*)arg2;
- (id)processWithOptions:(id)arg1 regionOfInterest:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 warningRecorder:(id)arg3 cancellationSemaphore:(id)arg4 error:(id*)arg5;

@end
