/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/Navigation.framework/Navigation
 */

@interface MNVoiceController : NSObject <AVAudioPlayerDelegate, MNVoiceEventQueueDelegate, VSSpeechSynthesizerDelegate> {
    MNNavigationAudioSession * _activeNavigationSession;
    NSObject<OS_dispatch_queue> * _audioQueue;
    long long  _audioSessionState;
    NSString * _currentLanguage;
    long long  _currentLanguageSource;
    MNVoiceEvent * _currentVoiceEvent;
    <VSSpeechSynthesizerDelegate> * _delegate;
    MNVoiceEventQueue * _eventQueue;
    bool  _isPersistentConnectionOpen;
    NSString * _languageLocale;
    AVAudioPlayer * _leftTurnAudioPlayer;
    NSDictionary * _localizableStrings;
    bool  _muteOverride;
    NSHashTable * _observers;
    NSMutableArray * _postAudioSessionActivationBlocks;
    AVAudioPlayer * _rightTurnAudioPlayer;
    bool  _shouldBePlayingPrompt;
    bool  _spokenLanguageIsUILanguage;
    VSSpeechSynthesizer * _synthesizer;
    NSString * _uiLanguage;
}

@property (nonatomic, retain) MNNavigationAudioSession *activeNavigationSession;
@property (nonatomic, retain) MNVoiceEvent *currentVoiceEvent;
@property (nonatomic, readonly) NSString *currentVoiceLanguage;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic) <VSSpeechSynthesizerDelegate> *delegate;
@property (readonly, copy) NSString *description;
@property (readonly) unsigned long long hash;
@property (nonatomic, readonly) bool speechMuted;
@property (readonly) Class superclass;
@property (nonatomic, retain) VSSpeechSynthesizer *synthesizer;

+ (id)localizedStringForKey:(id)arg1 defaultValue:(id)arg2;
+ (id)sharedInstance;

- (void).cxx_destruct;
- (void)_activateAudioSession:(id /* block */)arg1;
- (void)_audioInterruption:(id)arg1;
- (void)_audioRoutesChanged:(id)arg1;
- (void)_deactivateAudioSession;
- (id)_defaultVoiceLanguageWithSource:(long long*)arg1;
- (void)_defaultsDidChange;
- (void)_handleFinishedPlayingBeepWithStatusCode:(int)arg1;
- (void)_handleFinishedSpeakingWithStatusCode:(int)arg1;
- (id)_leftTurnAudioPlayer;
- (id)_localizedStringForKey:(id)arg1 defaultValue:(id)arg2;
- (void)_mediaServicesWereReset:(id)arg1;
- (void)_performWithActiveAudioSession:(id /* block */)arg1;
- (bool)_playBeepEvent:(id)arg1;
- (void)_playEvent:(id)arg1;
- (bool)_playTextEvent:(id)arg1;
- (void)_processNextEvent;
- (id)_rightTurnAudioPlayer;
- (void)_setAudioSessionActive:(bool)arg1;
- (void)_setGender;
- (void)_setLoggingEnabled:(bool)arg1;
- (void)_setMaintainInactivePersistentConnection:(bool)arg1;
- (void)_setVolumeControlEnabled:(bool)arg1;
- (bool)_stopCurrentEvent;
- (id)_uiLanguage;
- (void)_updateCurrentVoiceLanguage;
- (void)_updateFromAudioRoutes;
- (id)_vsPreferencesSpokenLanguageIdentifier;
- (id)activeNavigationSession;
- (void)addObserver:(id)arg1;
- (void)audioPlayerDidFinishPlaying:(id)arg1 successfully:(bool)arg2;
- (void)beepIfNecessaryForShortPromptType:(unsigned long long)arg1;
- (id)currentVoiceEvent;
- (id)currentVoiceLanguage;
- (void)dealloc;
- (id)delegate;
- (double)durationToSpeak:(id)arg1;
- (void)endAnnounce;
- (id)init;
- (bool)isPlayingAudio;
- (bool)isSpeaking;
- (void)prepareToAnnounce;
- (void)removeObserver:(id)arg1;
- (void)setActiveNavigationSession:(id)arg1;
- (void)setAudioSessionProperties;
- (void)setCurrentVoiceEvent:(id)arg1;
- (void)setDelegate:(id)arg1;
- (void)setSynthesizer:(id)arg1;
- (void)setVolume:(double)arg1;
- (void)speak:(id)arg1 completionBlock:(id /* block */)arg2;
- (bool)speechMuted;
- (void)speechSynthesizer:(id)arg1 didFinishSpeaking:(bool)arg2 withError:(id)arg3;
- (void)stop;
- (id)synthesizer;
- (void)voiceEventQueue:(id)arg1 wantsToImmediatelyPlayEvent:(id)arg2;

@end
