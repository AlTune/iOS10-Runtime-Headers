/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/GeoServices.framework/GeoServices
 */

@interface GEOLogMessage : PBCodable <NSCopying> {
    GEOAppConfig * _appConfig;
    GEOAppState * _appState;
    GEODebugLogMessage * _debugLogMessage;
    GEODeviceConfig * _deviceConfig;
    GEODeviceState * _deviceState;
    struct { 
        unsigned int logMessageSubType : 1; 
        unsigned int logMessageType : 1; 
    }  _has;
    NSString * _logFacility;
    NSString * _logMessageString;
    int  _logMessageSubType;
    int  _logMessageType;
    NSMutableArray * _logMsgEvents;
    GEOPerformanceLogMessage * _perfLogMessage;
    GEOUsageLogMessage * _usageLogMessage;
}

@property (nonatomic, retain) GEOAppConfig *appConfig;
@property (nonatomic, retain) GEOAppState *appState;
@property (nonatomic, retain) GEODebugLogMessage *debugLogMessage;
@property (nonatomic, retain) GEODeviceConfig *deviceConfig;
@property (nonatomic, retain) GEODeviceState *deviceState;
@property (nonatomic, readonly) bool hasAppConfig;
@property (nonatomic, readonly) bool hasAppState;
@property (nonatomic, readonly) bool hasDebugLogMessage;
@property (nonatomic, readonly) bool hasDeviceConfig;
@property (nonatomic, readonly) bool hasDeviceState;
@property (nonatomic, readonly) bool hasLogFacility;
@property (nonatomic, readonly) bool hasLogMessageString;
@property (nonatomic) bool hasLogMessageSubType;
@property (nonatomic) bool hasLogMessageType;
@property (nonatomic, readonly) bool hasPerfLogMessage;
@property (nonatomic, readonly) bool hasUsageLogMessage;
@property (nonatomic, retain) NSString *logFacility;
@property (nonatomic, retain) NSString *logMessageString;
@property (nonatomic) int logMessageSubType;
@property (nonatomic) int logMessageType;
@property (nonatomic, retain) NSMutableArray *logMsgEvents;
@property (nonatomic, retain) GEOPerformanceLogMessage *perfLogMessage;
@property (nonatomic, retain) GEOUsageLogMessage *usageLogMessage;

+ (id)acceptedLogMsgEvents;
+ (id)acceptedLogMsgEventsForLogMessageType:(int)arg1;
+ (void)initializeAcceptedLogMsgEventTypes;
+ (bool)logMessageType:(int)arg1 acceptsLogMsgEventType:(int)arg2;
+ (id)logMessagesForEvent:(id)arg1;
+ (Class)logMsgEventType;

- (int)StringAsLogMessageSubType:(id)arg1;
- (int)StringAsLogMessageType:(id)arg1;
- (bool)acceptsLogMsgEventType:(int)arg1;
- (void)addLogMsgEvent:(id)arg1;
- (id)appConfig;
- (id)appState;
- (void)clearLogMsgEvents;
- (void)copyTo:(id)arg1;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (void)dealloc;
- (id)debugLogMessage;
- (id)description;
- (id)deviceConfig;
- (id)deviceState;
- (id)dictionaryRepresentation;
- (id)groupIdentifier;
- (unsigned int)groupSequenceNumber;
- (bool)hasAppConfig;
- (bool)hasAppState;
- (bool)hasDebugLogMessage;
- (bool)hasDeviceConfig;
- (bool)hasDeviceState;
- (bool)hasLogFacility;
- (bool)hasLogMessageString;
- (bool)hasLogMessageSubType;
- (bool)hasLogMessageType;
- (bool)hasPerfLogMessage;
- (bool)hasUsageLogMessage;
- (unsigned long long)hash;
- (bool)isEqual:(id)arg1;
- (id)logFacility;
- (id)logMessageString;
- (int)logMessageSubType;
- (id)logMessageSubTypeAsString:(int)arg1;
- (int)logMessageType;
- (id)logMessageTypeAsString:(int)arg1;
- (id)logMsgEventAtIndex:(unsigned long long)arg1;
- (id)logMsgEvents;
- (unsigned long long)logMsgEventsCount;
- (void)mergeFrom:(id)arg1;
- (id)perfLogMessage;
- (bool)readFrom:(id)arg1;
- (void)setAppConfig:(id)arg1;
- (void)setAppState:(id)arg1;
- (void)setDebugLogMessage:(id)arg1;
- (void)setDeviceConfig:(id)arg1;
- (void)setDeviceState:(id)arg1;
- (void)setHasLogMessageSubType:(bool)arg1;
- (void)setHasLogMessageType:(bool)arg1;
- (void)setLogFacility:(id)arg1;
- (void)setLogMessageString:(id)arg1;
- (void)setLogMessageSubType:(int)arg1;
- (void)setLogMessageType:(int)arg1;
- (void)setLogMsgEvents:(id)arg1;
- (void)setPerfLogMessage:(id)arg1;
- (void)setUsageLogMessage:(id)arg1;
- (id)usageLogMessage;
- (void)writeTo:(id)arg1;

@end
