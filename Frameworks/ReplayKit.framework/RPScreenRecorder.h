/* Generated by RuntimeBrowser
   Image: /System/Library/Frameworks/ReplayKit.framework/ReplayKit
 */

@interface RPScreenRecorder : NSObject <RPPreviewViewControllerDelegate, UINavigationControllerDelegate, UIPopoverPresentationControllerDelegate> {
    bool  _available;
    bool  _cameraEnabled;
    UIView * _cameraPreviewView;
    <RPScreenRecorderDelegate> * _delegate;
    bool  _microphoneEnabled;
    RPPipViewController * _pipViewController;
    NSString * _previousAudioCategory;
    unsigned long long  _previousAudioSessionOptions;
    bool  _recording;
    id /* block */  _saveVideoToCameraRollCompletionBlock;
    bool  _systemRecording;
    NSDate * _systemRecordingControlCenterEndClipEndTime;
    NSDate * _systemRecordingControlCenterEndClipStartTime;
    NSDate * _systemRecordingControlCenterStartClipEndTime;
    NSDate * _systemRecordingControlCenterStartClipStartTime;
    RPSystemRecordingIndicatorWindow * _systemRecordingIndicatorWindow;
    UIWindow * _windowToRecord;
}

@property (getter=isAvailable, nonatomic) bool available;
@property (getter=isCameraEnabled, nonatomic) bool cameraEnabled;
@property (nonatomic, retain) UIView *cameraPreviewView;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic) <RPScreenRecorderDelegate> *delegate;
@property (readonly, copy) NSString *description;
@property (readonly) unsigned long long hash;
@property (getter=isMicrophoneEnabled, nonatomic) bool microphoneEnabled;
@property (nonatomic, retain) RPPipViewController *pipViewController;
@property (nonatomic, retain) NSString *previousAudioCategory;
@property (nonatomic) unsigned long long previousAudioSessionOptions;
@property (getter=isRecording, nonatomic) bool recording;
@property (nonatomic, copy) id /* block */ saveVideoToCameraRollCompletionBlock;
@property (readonly) Class superclass;
@property (nonatomic) bool systemRecording;
@property (nonatomic, retain) NSDate *systemRecordingControlCenterEndClipEndTime;
@property (nonatomic, retain) NSDate *systemRecordingControlCenterEndClipStartTime;
@property (nonatomic, retain) NSDate *systemRecordingControlCenterStartClipEndTime;
@property (nonatomic, retain) NSDate *systemRecordingControlCenterStartClipStartTime;
@property (nonatomic, retain) RPSystemRecordingIndicatorWindow *systemRecordingIndicatorWindow;
@property (nonatomic, retain) UIWindow *windowToRecord;

+ (id)sharedRecorder;

- (void).cxx_destruct;
- (void)_startRecordingWithMicrophoneEnabled:(bool)arg1 cameraEnabled:(bool)arg2 streamingEnabled:(bool)arg3 handler:(id /* block */)arg4;
- (id)applicationWindow;
- (id)cameraPreviewView;
- (void)clientDidBecomeActive;
- (void)clientWillResignActive;
- (void)configureAudioSession;
- (void)controlCenterDidDismiss;
- (void)controlCenterWillPresent;
- (unsigned int)currentWindowLayerContextID;
- (struct CGSize { double x1; double x2; })currentWindowSize;
- (void)dealloc;
- (id)delegate;
- (void)discardRecordingWithHandler:(id /* block */)arg1;
- (bool)isAvailable;
- (bool)isCameraEnabled;
- (bool)isMicrophoneEnabled;
- (bool)isRecording;
- (bool)isScreenRecordingSupportedOnDevice;
- (void)notifyDelegateOfRecorderAvailability;
- (id)pipViewController;
- (id)previousAudioCategory;
- (unsigned long long)previousAudioSessionOptions;
- (void)restoreAudioSession;
- (id /* block */)saveVideoToCameraRollCompletionBlock;
- (void)setAvailable:(bool)arg1;
- (void)setCameraEnabled:(bool)arg1;
- (void)setCameraPreviewView:(id)arg1;
- (void)setDelegate:(id)arg1;
- (void)setMicrophoneEnabled:(bool)arg1;
- (void)setPipViewController:(id)arg1;
- (void)setPreviousAudioCategory:(id)arg1;
- (void)setPreviousAudioSessionOptions:(unsigned long long)arg1;
- (void)setRecording:(bool)arg1;
- (void)setSaveVideoToCameraRollCompletionBlock:(id /* block */)arg1;
- (void)setSystemRecording:(bool)arg1;
- (void)setSystemRecordingControlCenterEndClipEndTime:(id)arg1;
- (void)setSystemRecordingControlCenterEndClipStartTime:(id)arg1;
- (void)setSystemRecordingControlCenterStartClipEndTime:(id)arg1;
- (void)setSystemRecordingControlCenterStartClipStartTime:(id)arg1;
- (void)setSystemRecordingIndicatorWindow:(id)arg1;
- (void)setWindowRotationLocked:(bool)arg1;
- (void)setWindowToRecord:(id)arg1;
- (void)startBroadcastWithHandler:(id /* block */)arg1;
- (void)startRecordingWithHandler:(id /* block */)arg1;
- (void)startRecordingWithMicrophoneEnabled:(bool)arg1 cameraEnabled:(bool)arg2 streamingEnabled:(bool)arg3 handler:(id /* block */)arg4;
- (void)startRecordingWithMicrophoneEnabled:(bool)arg1 handler:(id /* block */)arg2;
- (void)startRecordingWithMicrophoneEnabled:(bool)arg1 windowToRecord:(id)arg2 systemRecording:(bool)arg3 handler:(id /* block */)arg4;
- (void)stopBroadcastWithHandler:(id /* block */)arg1;
- (void)stopRecordingAndSaveToCameraRoll:(id /* block */)arg1;
- (void)stopRecordingWithAdditionalShareFileAttachment:(id)arg1 overrideShareMessage:(id)arg2 handler:(id /* block */)arg3;
- (void)stopRecordingWithAdditionalShareFileAttachment:(id)arg1 overrideShareMessage:(id)arg2 previewViewControllerHasDarkToolbar:(bool)arg3 handler:(id /* block */)arg4;
- (void)stopRecordingWithError:(id)arg1 movieURL:(id)arg2;
- (void)stopRecordingWithHandler:(id /* block */)arg1;
- (void)stopRecordingWithVideoURLHandler:(id /* block */)arg1;
- (bool)systemRecording;
- (id)systemRecordingControlCenterEndClipEndTime;
- (id)systemRecordingControlCenterEndClipStartTime;
- (id)systemRecordingControlCenterStartClipEndTime;
- (id)systemRecordingControlCenterStartClipStartTime;
- (id)systemRecordingIndicatorWindow;
- (void)updateRecordingAvailability;
- (void)video:(id)arg1 didFinishSavingToCameraRollWithError:(id)arg2 contextInfo:(void*)arg3;
- (id)windowToRecord;

@end
