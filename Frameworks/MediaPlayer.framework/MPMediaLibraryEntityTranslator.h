/* Generated by RuntimeBrowser
   Image: /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer
 */

@interface MPMediaLibraryEntityTranslator : NSObject {
    Class  _MPModelClass;
    id /* block */  _allowedItemPredicatesBlock;
    struct EntityClass { int (**x1)(); struct mutex { struct _opaque_pthread_mutex_t { long long x_1_2_1; BOOL x_1_2_2[56]; } x_2_1_1; } x2; struct unordered_map<std::__1::basic_string<char>, mlcore::ModelPropertyBase *, std::__1::hash<std::__1::basic_string<char> >, std::__1::equal_to<std::__1::basic_string<char> >, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, mlcore::ModelPropertyBase *> > > { struct __hash_table<std::__1::__hash_value_type<std::__1::basic_string<char>, mlcore::ModelPropertyBase *>, std::__1::__unordered_map_hasher<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, mlcore::ModelPropertyBase *>, std::__1::hash<std::__1::basic_string<char> >, true>, std::__1::__unordered_map_equal<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, mlcore::ModelPropertyBase *>, std::__1::equal_to<std::__1::basic_string<char> >, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::basic_string<char>, mlcore::ModelPropertyBase *> > > { struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, mlcore::ModelPropertyBase *>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, mlcore::ModelPropertyBase *>, void *> *> > > { struct __compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, mlcore::ModelPropertyBase *>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, mlcore::ModelPropertyBase *>, void *> *> > > { struct __hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, mlcore::ModelPropertyBase *>, void *> {} **x_1_4_1; struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, mlcore::ModelPropertyBase *>, void *> *> > { struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, mlcore::ModelPropertyBase *>, void *> *> > { unsigned long long x_1_6_1; } x_2_5_1; } x_1_4_2; } x_1_3_1; } x_1_2_1; struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, mlcore::ModelPropertyBase *>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, mlcore::ModelPropertyBase *>, void *> > > { struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, mlcore::ModelPropertyBase *>, void *> *> { struct __hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, mlcore::ModelPropertyBase *>, void *> {} *x_1_4_1; } x_2_3_1; } x_1_2_2; struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, mlcore::ModelPropertyBase *>, std::__1::hash<std::__1::basic_string<char> >, true> > { unsigned long long x_3_3_1; } x_1_2_3; struct __compressed_pair<float, std::__1::__unordered_map_equal<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, mlcore::ModelPropertyBase *>, std::__1::equal_to<std::__1::basic_string<char> >, true> > { float x_4_3_1; } x_1_2_4; } x_3_1_1; } x3; struct unordered_map<mlcore::ModelPropertyBase *, mlcore::EntityClass *, std::__1::hash<mlcore::ModelPropertyBase *>, std::__1::equal_to<mlcore::ModelPropertyBase *>, std::__1::allocator<std::__1::pair<mlcore::ModelPropertyBase *const, mlcore::EntityClass *> > > { struct __hash_table<std::__1::__hash_value_type<mlcore::ModelPropertyBase *, mlcore::EntityClass *>, std::__1::__unordered_map_hasher<mlcore::ModelPropertyBase *, std::__1::__hash_value_type<mlcore::ModelPropertyBase *, mlcore::EntityClass *>, std::__1::hash<mlcore::ModelPropertyBase *>, true>, std::__1::__unordered_map_equal<mlcore::ModelPropertyBase *, std::__1::__hash_value_type<mlcore::ModelPropertyBase *, mlcore::EntityClass *>, std::__1::equal_to<mlcore::ModelPropertyBase *>, true>, std::__1::allocator<std::__1::__hash_value_type<mlcore::ModelPropertyBase *, mlcore::EntityClass *> > > { struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<mlcore::ModelPropertyBase *, mlcore::EntityClass *>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<mlcore::ModelPropertyBase *, mlcore::EntityClass *>, void *> *> > > { struct __compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<mlcore::ModelPropertyBase *, mlcore::EntityClass *>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<mlcore::ModelPropertyBase *, mlcore::EntityClass *>, void *> *> > > { struct __hash_node<std::__1::__hash_value_type<mlcore::ModelPropertyBase *, mlcore::EntityClass *>, void *> {} **x_1_4_1; struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<mlcore::ModelPropertyBase *, mlcore::EntityClass *>, void *> *> > { struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<mlcore::ModelPropertyBase *, mlcore::EntityClass *>, void *> *> > { unsigned long long x_1_6_1; } x_2_5_1; } x_1_4_2; } x_1_3_1; } x_1_2_1; struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<mlcore::ModelPropertyBase *, mlcore::EntityClass *>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<mlcore::ModelPropertyBase *, mlcore::EntityClass *>, void *> > > { struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<mlcore::ModelPropertyBase *, mlcore::EntityClass *>, void *> *> { struct __hash_node<std::__1::__hash_value_type<mlcore::ModelPropertyBase *, mlcore::EntityClass *>, void *> {} *x_1_4_1; } x_2_3_1; } x_1_2_2; struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<mlcore::ModelPropertyBase *, std::__1::__hash_value_type<mlcore::ModelPropertyBase *, mlcore::EntityClass *>, std::__1::hash<mlcore::ModelPropertyBase *>, true> > { unsigned long long x_3_3_1; } x_1_2_3; struct __compressed_pair<float, std::__1::__unordered_map_equal<mlcore::ModelPropertyBase *, std::__1::__hash_value_type<mlcore::ModelPropertyBase *, mlcore::EntityClass *>, std::__1::equal_to<mlcore::ModelPropertyBase *>, true> > { float x_4_3_1; } x_1_2_4; } x_4_1_1; } x4; } * _entityClass;
    id /* block */  _entityQueryBlock;
    NSMutableDictionary * _propertiesToTranslators;
    NSMutableDictionary * _relationshipsToTranslators;
    bool  _transient;
}

@property (nonatomic, readonly) Class MPModelClass;
@property (nonatomic, copy) id /* block */ allowedItemPredicatesBlock;
@property (nonatomic, readonly) struct EntityClass { int (**x1)(); struct mutex { struct _opaque_pthread_mutex_t { long long x_1_2_1; BOOL x_1_2_2[56]; } x_2_1_1; } x2; /* Warning: unhandled struct encoding: '{unordered_map<std::__1::basic_string<char>' */ struct x3; void*x4; void*x5; void*x6; void*x7; void*x8; void*x9; void*x10; void*x11; void*x12; void*x13; void*x14; void*x15; void*x16; void*x17; void*x18; void*x19; long x20; void*x21; void*x22; void*x23; void*x24; void*x25; void*x26; void*x27; void*x28; void*x29; void*x30; void*x31; void*x32; void*x33; void*x34; void*x35; void*x36; void*x37; void*x38; void*x39; id x40; void*x41; void*x42; void*x43; void*x44; void*x45; void*x46; void*x47; void*x48; long long x49; void*x50; void*x51; void*x52; void*x53; id x54; void*x55; short x56; void*x57; void*x58; void*x59; void*x60; void*x61; void*x62; void*x63; short x64; void*x65; void*x66; void*x67; void*x68; void*x69; void*x70; double x71; short x72; void*x73; void*x74; void*x75; void*x76; void*x77; void*x78; void*x79; short x80; void*x81; void*x82; void*x83; void*x84; id x85; void*x86; short x87; void*x88; void*x89; void*x90; void*x91; void*x92; unsigned char x93; double x94; long long x95; void*x96; void*x97; void*x98; void*x99; void*x100; void*x101; void*x102; const void*x103; void*x104; void*x105; void*x106; void*x107; void*x108; void*x109; short x110; void*x111; void*x112; void*x113; void*x114; id x115; void*x116; long long x117; void*x118; void*x119; void*x120; void*x121; void*x122; void*x123; void*x124; short x125; void*x126; void*x127; void*x128; void*x129; void*x130; void*x131; void*x132; short x133; void*x134; void*x135; void*x136; void*x137; void*x138; void*x139; void*x140; void*x141; void*x142; void*x143; void*x144; void*x145; void*x146; void*x147; void*x148; void*x149; void*x150; void*x151; void*x152; void*x153; float x154; void*x155; unsigned short x156; void*x157; short x158; void*x159; void*x160; void*x161; void*x162; unsigned long x163; int x164; unsigned int x165/* : ? */; const void*x166; const void*x167; void*x168; void*x169; const int x170; void x171; void*x172; void*x173; void*x174; void*x175; const void*x176; void*x177; void*x178; void*x179; out const void*x180; short x181; void*x182; void*x183; void*x184; out void*x185; out in void*x186; long x187; void*x188; short x189; int x190; short x191; void*x192; float x193; const void*x194; void*x195; void*x196; void*x197; out const void*x198; void*x199; void*x200; const void*x201; void*x202; void*x203; void*x204; out const void*x205; short x206; void*x207; void*x208; void*x209; out void*x210; out short x211; void*x212; const void*x213; void*x214; void*x215; void*x216; float x217; const void*x218; void*x219; void*x220; void*x221; out const void*x222; void*x223; void*x224; void*x225; out void*x226; out short x227; void*x228; const void*x229; void*x230; void*x231; void*x232; void*x233; void*x234; void*x235; void*x236; void*x237; void*x238; void*x239; void*x240; void*x241; void*x242; void*x243; void*x244; void*x245; long x246; void*x247; void*x248; void*x249; inout void*x250; void*x251; void*x252; void*x253; void*x254; void*x255; void*x256; unsigned short x257; void*x258; short x259; void*x260; void*x261; void*x262; void*x263; unsigned long x264; int x265; unsigned int x266/* : ? */; const void*x267; const void*x268; void*x269; void*x270; const int x271; void x272; void*x273; void*x274; void*x275; void*x276; const void*x277; void*x278; void*x279; void*x280; out const void*x281; short x282; void*x283; void*x284; void*x285; void*x286; void*x287; void*x288; int x289; void*x290; unsigned short x291; void*x292; const void x293; int x294; BOOL x295; void*x296; short x297; void*x298; float x299; const void*x300; void*x301; void*x302; void*x303; out const void*x304; void*x305; void*x306; const void*x307; void*x308; void*x309; void*x310; out const void*x311; short x312; void*x313; void*x314; unsigned char x315; out in float x316; void*x317; const void*x318; in BOOL x319; void*x320; void*x321; float x322; const void*x323; void*x324; void*x325; void*x326; out const void*x327; void*x328; void*x329; unsigned char x330; out in float x331; void*x332; const void*x333; in BOOL x334; void*x335; void*x336; void*x337; void*x338; void*x339; void*x340; void*x341; void*x342; void*x343; void*x344; void*x345; void*x346; void*x347; void*x348; void*x349; void*x350; void*x351; void*x352; void*x353; void*x354; void*x355; void*x356; void*x357; void*x358; void x359; void*x360; const void*x361; BOOL x362; out in void*x363; void*x364; int x365; in void*x366; const short x367; void*x368; bool x369; void*x370; in double x371; long x372; void*x373; void*x374; void*x375; void*x376; long x377; int x378; BOOL x379; void*x380; void*x381; int x382; out in void*x383; void*x384; void*x385; void*x386; long doublex387; void*x388; unsigned char x389; void*x390; void*x391; void*x392; long doublex393; void*x394; void*x395; void*x396; void*x397; void*x398; void*x399; void*x400; void*x401; void*x402; void*x403; void*x404; void*x405; void*x406; void*x407; void*x408; bool x409; void*x410; void*x411; void*x412; unsigned char x413; void*x414; void*x415; void*x416; void*x417; bycopy unsigned char x418; void*x419; void*x420; in void*x421; int x422; void*x423; void*x424; void*x425; void*x426; void*x427; void*x428; void*x429; bycopy unsigned char x430; void*x431; void*x432; in void*x433; int x434; void*x435; void*x436; void*x437; void*x438; void*x439; void*x440; void*x441; void*x442; void*x443; void*x444; void*x445; void*x446; void*x447; void*x448; void*x449; void*x450; void*x451; void*x452; void*x453; void*x454; void*x455; void*x456; void*x457; long x458; void*x459; void*x460; void*x461; void*x462; void*x463; void*x464; void*x465; void*x466; void*x467; void*x468; void*x469; void*x470; void*x471; void*x472; void*x473; void*x474; void*x475; void*x476; void*x477; void*x478; void*x479; void*x480; void*x481; void*x482; void*x483; void*x484; void*x485; void*x486; void*x487; void*x488; void*x489; void*x490; void*x491; void*x492; void*x493; void*x494; void*x495; void*x496; void*x497; void*x498; void*x499; void*x500; void*x501; void*x502; void*x503; void*x504; void*x505; void*x506; void*x507; void*x508; void*x509; inout void*x510; void*x511; void*x512; void*x513; void*x514; void*x515; void*x516; inout void*x517; void*x518; void*x519; void*x520; void*x521; void*x522; void*x523; void*x524; void*x525; void*x526; void*x527; void*x528; void*x529; void*x530; void*x531; void*x532; void*x533; void*x534; void*x535; void*x536; void*x537; void*x538; void*x539; void*x540; void*x541; void*x542; void*x543; void*x544; void*x545; void*x546; void*x547; void*x548; unsigned long x549; void*x550; void*x551; void*x552; void*x553; void*x554; void*x555; void*x556; void*x557; void*x558; void*x559; void*x560; void*x561; void*x562; void*x563; void*x564; void*x565; void*x566; void*x567; void*x568; void*x569; void*x570; void*x571; void*x572; void*x573; void*x574; void*x575; void*x576; void*x577; void*x578; void*x579; void*x580; void*x581; void*x582; void*x583; long x584; void*x585; void*x586; void*x587; void*x588; void*x589; void*x590; void*x591; void*x592; void*x593; void*x594; void*x595; void*x596; unsigned short x597; void*x598; short x599; void*x600; void*x601; void*x602; void*x603; unsigned long x604; int x605; unsigned int x606/* : ? */; const void*x607; const void*x608; void*x609; void*x610; const int x611; void x612; void*x613; void*x614; void*x615; void*x616; const void*x617; void*x618; void*x619; void*x620; out const void*x621; short x622; void*x623; void*x624; void*x625; void*x626; void*x627; void*x628; int x629; void*x630; unsigned short x631; void*x632; const void x633; int x634; BOOL x635; void*x636; short x637; void*x638; float x639; const void*x640; void*x641; void*x642; void*x643; out const void*x644; void*x645; void*x646; const void*x647; void*x648; void*x649; void*x650; out const void*x651; short x652; void*x653; void*x654; unsigned char x655; out in float x656; void*x657; const void*x658; in BOOL x659; void*x660; void*x661; float x662; const void*x663; void*x664; void*x665; void*x666; out const void*x667; void*x668; void*x669; unsigned char x670; out in float x671; void*x672; const void*x673; in BOOL x674; void*x675; void*x676; void*x677; void*x678; void*x679; void*x680; void*x681; void*x682; void*x683; void*x684; void*x685; long x686; void*x687; void*x688; void*x689; void*x690; void*x691; void*x692; void*x693; void*x694; void*x695; void*x696; void*x697; void*x698; unsigned short x699; void*x700; short x701; void*x702; void*x703; void*x704; void*x705; unsigned long x706; int x707; unsigned int x708/* : ? */; const void*x709; const void*x710; void*x711; void*x712; const int x713; void x714; void*x715; void*x716; void*x717; void*x718; const void*x719; void*x720; void*x721; void*x722; out const void*x723; short x724; void*x725; void*x726; void*x727; void*x728; void*x729; void*x730; int x731; void*x732; unsigned short x733; void*x734; const void x735; int x736; BOOL x737; void*x738; short x739; void*x740; float x741; const void*x742; void*x743; void*x744; void*x745; out const void*x746; void*x747; void*x748; const void*x749; void*x750; void*x751; void*x752; out const void*x753; short x754; void*x755; void*x756; unsigned char x757; out in float x758; void*x759; const void*x760; in BOOL x761; void*x762; void*x763; float x764; const void*x765; void*x766; void*x767; void*x768; out const void*x769; void*x770; void*x771; unsigned char x772; out in float x773; void*x774; const void*x775; in BOOL x776; void*x777; void*x778; void*x779; void*x780; void*x781; void*x782; void*x783; void*x784; void*x785; void*x786; void*x787; long x788; void*x789; void*x790; void*x791; void*x792; void*x793; void*x794; void*x795; void*x796; void*x797; void*x798; void*x799; void*x800; unsigned short x801; void*x802; short x803; void*x804; void*x805; void*x806; void*x807; unsigned long x808; int x809; unsigned int x810/* : ? */; const void*x811; const void*x812; void*x813; void*x814; const int x815; void x816; void*x817; void*x818; void*x819; void*x820; const void*x821; void*x822; void*x823; void*x824; out const void*x825; short x826; void*x827; void*x828; void*x829; void*x830; void*x831; void*x832; int x833; void*x834; unsigned short x835; void*x836; const void x837; int x838; BOOL x839; void*x840; short x841; void*x842; float x843; const void*x844; void*x845; void*x846; void*x847; out const void*x848; void*x849; void*x850; const void*x851; void*x852; void*x853; void*x854; out const void*x855; short x856; void*x857; void*x858; unsigned char x859; out in float x860; void*x861; const void*x862; in BOOL x863; void*x864; void*x865; float x866; const void*x867; void*x868; void*x869; void*x870; out const void*x871; void*x872; void*x873; unsigned char x874; out in float x875; void*x876; const void*x877; in BOOL x878; void*x879; void*x880; void*x881; void*x882; void*x883; void*x884; void*x885; void*x886; void*x887; void*x888; void*x889; long x890; void*x891; void*x892; void*x893; void*x894; void*x895; void*x896; void*x897; void*x898; void*x899; void*x900; void*x901; void*x902; unsigned short x903; void*x904; short x905; void*x906; void*x907; void*x908; void*x909; unsigned long x910; int x911; unsigned int x912/* : ? */; const void*x913; const void*x914; void*x915; void*x916; const int x917; void x918; void*x919; void*x920; void*x921; void*x922; const void*x923; void*x924; void*x925; void*x926; out const void*x927; short x928; void*x929; void*x930; void*x931; void*x932; void*x933; void*x934; int x935; void*x936; unsigned short x937; void*x938; const void x939; int x940; BOOL x941; void*x942; short x943; void*x944; float x945; const void*x946; void*x947; void*x948; void*x949; out const void*x950; void*x951; void*x952; const void*x953; void*x954; void*x955; void*x956; out const void*x957; short x958; void*x959; void*x960; unsigned char x961; out in float x962; void*x963; const void*x964; in BOOL x965; void*x966; void*x967; float x968; const void*x969; void*x970; void*x971; void*x972; out const void*x973; void*x974; void*x975; unsigned char x976; out in float x977; void*x978; const void*x979; in BOOL x980; void*x981; void*x982; void*x983; void*x984; void*x985; void*x986; void*x987; void*x988; void*x989; void*x990; void*x991; long x992; void*x993; void*x994; void*x995; void*x996; void*x997; void*x998; void*x999; void*x1000; void*x1001; void*x1002; void*x1003; void*x1004; unsigned short x1005; void*x1006; short x1007; void*x1008; void*x1009; void*x1010; void*x1011; unsigned long x1012; int x1013; unsigned int x1014/* : ? */; const void*x1015; const void*x1016; void*x1017; void*x1018; const int x1019; void x1020; void*x1021; void*x1022; void*x1023; void*x1024; const void*x1025; void*x1026; void*x1027; void*x1028; out const void*x1029; short x1030; void*x1031; void*x1032; void*x1033; void*x1034; void*x1035; void*x1036; int x1037; void*x1038; unsigned short x1039; void*x1040; const void x1041; int x1042; BOOL x1043; void*x1044; short x1045; void*x1046; float x1047; const void*x1048; void*x1049; void*x1050; void*x1051; out const void*x1052; void*x1053; void*x1054; const void*x1055; void*x1056; void*x1057; void*x1058; out const void*x1059; short x1060; void*x1061; void*x1062; unsigned char x1063; out in float x1064; void*x1065; const void*x1066; in BOOL x1067; void*x1068; void*x1069; float x1070; const void*x1071; void*x1072; void*x1073; void*x1074; out const void*x1075; void*x1076; void*x1077; unsigned char x1078; out in float x1079; void*x1080; const void*x1081; in BOOL x1082; void*x1083; void*x1084; void*x1085; void*x1086; void*x1087; void*x1088; void*x1089; void*x1090; void*x1091; void*x1092; void*x1093; long x1094; void*x1095; void*x1096; void*x1097; void*x1098; void*x1099; void*x1100; void*x1101; void*x1102; void*x1103; void*x1104; void*x1105; void*x1106; unsigned short x1107; void*x1108; short x1109; void*x1110; void*x1111; void*x1112; void*x1113; unsigned long x1114; int x1115; unsigned int x1116/* : ? */; const void*x1117; const void*x1118; void*x1119; void*x1120; const int x1121; void x1122; void*x1123; void*x1124; void*x1125; void*x1126; const void*x1127; void*x1128; void*x1129; void*x1130; out const void*x1131; short x1132; void*x1133; void*x1134; void*x1135; void*x1136; void*x1137; void*x1138; int x1139; void*x1140; unsigned short x1141; void*x1142; const void x1143; int x1144; BOOL x1145; void*x1146; short x1147; void*x1148; float x1149; const void*x1150; void*x1151; void*x1152; void*x1153; out const void*x1154; void*x1155; void*x1156; const void*x1157; void*x1158; void*x1159; void*x1160; out const void*x1161; short x1162; void*x1163; void*x1164; unsigned char x1165; out in float x1166; void*x1167; const void*x1168; in BOOL x1169; void*x1170; void*x1171; float x1172; const void*x1173; void*x1174; void*x1175; void*x1176; out const void*x1177; void*x1178; void*x1179; unsigned char x1180; out in float x1181; void*x1182; const void*x1183; in BOOL x1184; void*x1185; void*x1186; void*x1187; void*x1188; void*x1189; void*x1190; void*x1191; void*x1192; void*x1193; void*x1194; void*x1195; long x1196; void*x1197; void*x1198; void*x1199; void*x1200; void*x1201; void*x1202; void*x1203; void*x1204; void*x1205; void*x1206; void*x1207; void*x1208; unsigned short x1209; void*x1210; short x1211; void*x1212; void*x1213; void*x1214; void*x1215; unsigned long x1216; int x1217; unsigned int x1218/* : ? */; const void*x1219; const void*x1220; void*x1221; void*x1222; const int x1223; void x1224; void*x1225; void*x1226; void*x1227; void*x1228; const void*x1229; void*x1230; void*x1231; void*x1232; out const void*x1233; short x1234; void*x1235; void*x1236; void*x1237; void*x1238; void*x1239; void*x1240; int x1241; void*x1242; unsigned short x1243; void*x1244; const void x1245; int x1246; BOOL x1247; void*x1248; short x1249; void*x1250; float x1251; const void*x1252; void*x1253; void*x1254; void*x1255; out const void*x1256; void*x1257; void*x1258; const void*x1259; void*x1260; void*x1261; void*x1262; out const void*x1263; short x1264; void*x1265; void*x1266; unsigned char x1267; out in float x1268; void*x1269; const void*x1270; in BOOL x1271; void*x1272; void*x1273; float x1274; const void*x1275; void*x1276; void*x1277; void*x1278; out const void*x1279; void*x1280; void*x1281; unsigned char x1282; out in float x1283; void*x1284; const void*x1285; in BOOL x1286; void*x1287; void*x1288; void*x1289; void*x1290; void*x1291; void*x1292; void*x1293; void*x1294; void*x1295; void*x1296; void*x1297; long x1298; void*x1299; void*x1300; void*x1301; void*x1302; void*x1303; void*x1304; void*x1305; void*x1306; void*x1307; void*x1308; void*x1309; void*x1310; unsigned short x1311; void*x1312; short x1313; void*x1314; void*x1315; void*x1316; void*x1317; unsigned long x1318; int x1319; unsigned int x1320/* : ? */; const void*x1321; const void*x1322; void*x1323; void*x1324; const int x1325; void x1326; void*x1327; void*x1328; void*x1329; void*x1330; const void*x1331; void*x1332; void*x1333; void*x1334; out const void*x1335; short x1336; void*x1337; void*x1338; void*x1339; void*x1340; void*x1341; void*x1342; int x1343; void*x1344; unsigned short x1345; void*x1346; const void x1347; int x1348; BOOL x1349; void*x1350; short x1351; void*x1352; float x1353; const void*x1354; void*x1355; void*x1356; void*x1357; out const void*x1358; void*x1359; void*x1360; const void*x1361; void*x1362; void*x1363; void*x1364; out const void*x1365; short x1366; void*x1367; void*x1368; unsigned char x1369; out in float x1370; void*x1371; const void*x1372; in BOOL x1373; void*x1374; void*x1375; float x1376; const void*x1377; void*x1378; void*x1379; void*x1380; out const void*x1381; void*x1382; void*x1383; unsigned char x1384; out in float x1385; void*x1386; const void*x1387; in BOOL x1388; void*x1389; void*x1390; void*x1391; void*x1392; void*x1393; void*x1394; void*x1395; void*x1396; void*x1397; void*x1398; void*x1399; long x1400; void*x1401; void*x1402; void*x1403; union x1404; void*x1405; void*x1406; void*x1407; void*x1408; void*x1409; unsigned short x1410; void*x1411; short x1412; void*x1413; void*x1414; void*x1415; void*x1416; unsigned long x1417; int x1418; unsigned int x1419/* : ? */; const void*x1420; const void*x1421; void*x1422; void*x1423; const int x1424; void x1425; void*x1426; void*x1427; void*x1428; void*x1429; const void*x1430; void*x1431; void*x1432; void*x1433; out const void*x1434; short x1435; void*x1436; void*x1437; void*x1438; void*x1439; void*x1440; void*x1441; int x1442; void*x1443; unsigned short x1444; void*x1445; const void x1446; int x1447; BOOL x1448; void*x1449; short x1450; void*x1451; float x1452; const void*x1453; void*x1454; void*x1455; void*x1456; out const void*x1457; void*x1458; void*x1459; const void*x1460; void*x1461; void*x1462; void*x1463; out const void*x1464; short x1465; void*x1466; void*x1467; unsigned char x1468; out in float x1469; void*x1470; const void*x1471; in BOOL x1472; void*x1473; void*x1474; float x1475; const void*x1476; void*x1477; void*x1478; void*x1479; out const void*x1480; void*x1481; void*x1482; unsigned char x1483; out in float x1484; void*x1485; const void*x1486; in BOOL x1487; void*x1488; void*x1489; void*x1490; void*x1491; void*x1492; void*x1493; void*x1494; void*x1495; void*x1496; void*x1497; void*x1498; long x1499; void*x1500; void*x1501; void*x1502; void*x1503; void*x1504; void*x1505; void*x1506; void*x1507; void*x1508; void*x1509; void*x1510; void*x1511; unsigned short x1512; void*x1513; short x1514; void*x1515; void*x1516; void*x1517; void*x1518; unsigned long x1519; int x1520; unsigned int x1521/* : ? */; const void*x1522; const void*x1523; void*x1524; void*x1525; const int x1526; void x1527; void*x1528; void*x1529; void*x1530; void*x1531; const void*x1532; void*x1533; void*x1534; void*x1535; out const void*x1536; short x1537; void*x1538; void*x1539; void*x1540; void*x1541; void*x1542; void*x1543; int x1544; void*x1545; unsigned short x1546; void*x1547; const void x1548; int x1549; BOOL x1550; void*x1551; short x1552; void*x1553; float x1554; const void*x1555; void*x1556; void*x1557; void*x1558; out const void*x1559; void*x1560; void*x1561; const void*x1562; void*x1563; void*x1564; void*x1565; out const void*x1566; short x1567; void*x1568; void*x1569; unsigned char x1570; out in float x1571; void*x1572; const void*x1573; in BOOL x1574; void*x1575; void*x1576; float x1577; const void*x1578; void*x1579; void*x1580; void*x1581; out const void*x1582; void*x1583; void*x1584; unsigned char x1585; out in float x1586; void*x1587; const void*x1588; in BOOL x1589; void*x1590; void*x1591; void*x1592; void*x1593; void*x1594; void*x1595; void*x1596; void*x1597; void*x1598; void*x1599; void*x1600; long x1601; void*x1602; void*x1603; void*x1604; void*x1605; inout void*x1606; void*x1607; void*x1608; void*x1609; void*x1610; void*x1611; void*x1612; unsigned short x1613; void*x1614; short x1615; void*x1616; void*x1617; void*x1618; void*x1619; unsigned long x1620; int x1621; unsigned int x1622/* : ? */; const void*x1623; const void*x1624; void*x1625; void*x1626; const int x1627; void x1628; void*x1629; void*x1630; void*x1631; void*x1632; const void*x1633; void*x1634; void*x1635; void*x1636; out const void*x1637; short x1638; void*x1639; unsigned short x1640; long x1641; int x1642; double x1643; void*x1644; short x1645; void*x1646; out void*x1647; void*x1648; int x1649; void*x1650; void*x1651; float x1652; const void*x1653; void*x1654; void*x1655; void*x1656; out const void*x1657; void*x1658; void*x1659; const void*x1660; void*x1661; void*x1662; void*x1663; out const void*x1664; short x1665; void*x1666; bycopy void*x1667; void*x1668; short x1669; void*x1670; out void*x1671; in double x1672; void*x1673; void*x1674; int x1675; out in void*x1676; float x1677; const void*x1678; void*x1679; void*x1680; void*x1681; out const void*x1682; void*x1683; bycopy void*x1684; void*x1685; short x1686; void*x1687; out void*x1688; in double x1689; void*x1690; void*x1691; int x1692; out in void*x1693; void*x1694; void*x1695; void*x1696; void*x1697; void*x1698; void*x1699; void*x1700; void*x1701; long x1702; void*x1703; void*x1704; void*x1705; void*x1706; void*x1707; void*x1708; void*x1709; void*x1710; void*x1711; void*x1712; void*x1713; void*x1714; unsigned short x1715; void*x1716; short x1717; void*x1718; void*x1719; void*x1720; void*x1721; unsigned long x1722; int x1723; unsigned int x1724/* : ? */; const void*x1725; const void*x1726; void*x1727; void*x1728; const int x1729; void x1730; void*x1731; void*x1732; void*x1733; void*x1734; const void*x1735; void*x1736; void*x1737; void*x1738; out const void*x1739; short x1740; void*x1741; void*x1742; void*x1743; void*x1744; void*x1745; void*x1746; int x1747; void*x1748; unsigned short x1749; void*x1750; const void x1751; int x1752; BOOL x1753; void*x1754; short x1755; void*x1756; float x1757; const void*x1758; void*x1759; void*x1760; void*x1761; out const void*x1762; void*x1763; void*x1764; const void*x1765; void*x1766; void*x1767; void*x1768; out const void*x1769; short x1770; void*x1771; void*x1772; unsigned char x1773; out in float x1774; void*x1775; const void*x1776; in BOOL x1777; void*x1778; void*x1779; float x1780; const void*x1781; void*x1782; void*x1783; void*x1784; out const void*x1785; void*x1786; void*x1787; unsigned char x1788; out in float x1789; void*x1790; const void*x1791; in BOOL x1792; void*x1793; void*x1794; void*x1795; void*x1796; void*x1797; void*x1798; void*x1799; void*x1800; void*x1801; void*x1802; void*x1803; long x1804; void*x1805; void*x1806; void*x1807; void*x1808; void*x1809; void*x1810; void*x1811; void*x1812; void*x1813; void*x1814; void*x1815; void*x1816; void*x1817; short x1818; void*x1819; void*x1820; void*x1821; void*x1822; void*x1823; char *x1824; void*x1825; const void*x1826; void*x1827; void*x1828; void*x1829; void*x1830; void*x1831; void*x1832; const void*x1833; void*x1834; void*x1835; void*x1836; void*x1837; void*x1838; void*x1839; void*x1840; void*x1841; void*x1842; void*x1843; void*x1844; void*x1845; void*x1846; void*x1847; long long x1848; void*x1849; void*x1850; void*x1851; void*x1852; void*x1853; void*x1854; long doublex1855; void*x1856; void*x1857; void*x1858; void*x1859; void*x1860; void*x1861; void*x1862; double x1863; long long x1864; void*x1865; void*x1866; void*x1867; void*x1868; void*x1869; void*x1870; void*x1871; void*x1872; void*x1873; void*x1874; void*x1875; void*x1876; void*x1877; void*x1878; void*x1879; short x1880; void*x1881; void*x1882; void*x1883; void*x1884; void*x1885; void*x1886; void*x1887; short x1888; void*x1889; void*x1890; void*x1891; void*x1892; void*x1893; void*x1894; void*x1895; const void*x1896; void*x1897; void*x1898; void*x1899; void*x1900; void*x1901; void*x1902; const void*x1903; void*x1904; void*x1905; void*x1906; void*x1907; void*x1908; void*x1909; short x1910; void*x1911; void*x1912; void*x1913; void*x1914; void*x1915; void*x1916; void*x1917; void*x1918; void*x1919; void*x1920; void*x1921; void*x1922; char *x1923; void*x1924; void*x1925; void*x1926; void*x1927; void*x1928; void*x1929; void*x1930; void*x1931; void*x1932; void*x1933; void*x1934; void*x1935; void*x1936; void*x1937; void*x1938; void*x1939; Class x1940; void*x1941; const void*x1942; void*x1943; void*x1944; void*x1945; void*x1946; void*x1947; BOOL x1948; short x1949; void*x1950; void*x1951; void*x1952; void*x1953; void*x1954; void*x1955; void*x1956; void*x1957; void*x1958; void*x1959; void*x1960; void*x1961; void*x1962; void*x1963; void*x1964; void*x1965; void*x1966; void*x1967; void*x1968; void*x1969; void*x1970; void*x1971; void*x1972; void*x1973; void*x1974; void*x1975; void*x1976; void*x1977; void*x1978; void*x1979; void*x1980; void*x1981; void*x1982; void*x1983; void*x1984; void*x1985; void*x1986; void*x1987; void*x1988; void*x1989; void*x1990; void*x1991; void*x1992; void*x1993; void*x1994; void*x1995; void*x1996; void*x1997; void*x1998; void*x1999; void*x2000; void*x2001; void*x2002; union x2003; void*x2004; void*x2005; void*x2006; void*x2007; void*x2008; void*x2009; void*x2010; void*x2011; void*x2012; void*x2013; void*x2014; void*x2015; void*x2016; void*x2017; void*x2018; void*x2019; void*x2020; void*x2021; void*x2022; void*x2023; void*x2024; void*x2025; void*x2026; void*x2027; void*x2028; void*x2029; void*x2030; void*x2031; void*x2032; void*x2033; void*x2034; void*x2035; void*x2036; void*x2037; void*x2038; void*x2039; void*x2040; void*x2041; void*x2042; void*x2043; void*x2044; void*x2045; void*x2046; void*x2047; void*x2048; void*x2049; void*x2050; void*x2051; long x2052; void*x2053; void*x2054; void*x2055; void*x2056; inout void*x2057; void*x2058; void*x2059; void*x2060; void*x2061; void*x2062; void*x2063; unsigned short x2064; void*x2065; short x2066; void*x2067; void*x2068; void*x2069; void*x2070; unsigned long x2071; int x2072; unsigned int x2073/* : ? */; const void*x2074; const void*x2075; void*x2076; void*x2077; const int x2078; void x2079; void*x2080; void*x2081; void*x2082; void*x2083; const void*x2084; void*x2085; void*x2086; void*x2087; out const void*x2088; short x2089; void*x2090; unsigned short x2091; long x2092; int x2093; double x2094; void*x2095; short x2096; void*x2097; out void*x2098; void*x2099; int x2100; void*x2101; void*x2102; float x2103; const void*x2104; void*x2105; void*x2106; void*x2107; out const void*x2108; void*x2109; void*x2110; const void*x2111; void*x2112; void*x2113; void*x2114; out const void*x2115; short x2116; void*x2117; bycopy void*x2118; void*x2119; short x2120; void*x2121; out void*x2122; in double x2123; void*x2124; void*x2125; int x2126; out in void*x2127; float x2128; const void*x2129; void*x2130; void*x2131; void*x2132; out const void*x2133; void*x2134; bycopy void*x2135; void*x2136; short x2137; void*x2138; out void*x2139; in double x2140; void*x2141; void*x2142; int x2143; out in void*x2144; void*x2145; void*x2146; void*x2147; void*x2148; void*x2149; void*x2150; void*x2151; void*x2152; long x2153; void*x2154; void*x2155; void*x2156; void*x2157; void*x2158; void*x2159; void*x2160; void*x2161; void*x2162; void*x2163; void*x2164; void*x2165; unsigned short x2166; void*x2167; short x2168; void*x2169; void*x2170; void*x2171; void*x2172; unsigned long x2173; int x2174; unsigned int x2175/* : ? */; const void*x2176; const void*x2177; void*x2178; void*x2179; const int x2180; void x2181; void*x2182; void*x2183; void*x2184; void*x2185; const void*x2186; void*x2187; void*x2188; void*x2189; out const void*x2190; short x2191; void*x2192; void*x2193; void*x2194; void*x2195; void*x2196; void*x2197; int x2198; void*x2199; unsigned short x2200; void*x2201; const void x2202; int x2203; BOOL x2204; void*x2205; short x2206; void*x2207; float x2208; const void*x2209; void*x2210; void*x2211; void*x2212; out const void*x2213; void*x2214; void*x2215; const void*x2216; void*x2217; void*x2218; void*x2219; out const void*x2220; short x2221; void*x2222; void*x2223; unsigned char x2224; out in float x2225; void*x2226; const void*x2227; in BOOL x2228; void*x2229; void*x2230; float x2231; const void*x2232; void*x2233; void*x2234; void*x2235; out const void*x2236; void*x2237; void*x2238; unsigned char x2239; out in float x2240; void*x2241; const void*x2242; in BOOL x2243; void*x2244; void*x2245; void*x2246; void*x2247; void*x2248; void*x2249; void*x2250; void*x2251; void*x2252; void*x2253; void*x2254; long x2255; void*x2256; void*x2257; void*x2258; void*x2259; void*x2260; void*x2261; void*x2262; void*x2263; void*x2264; void*x2265; void*x2266; void*x2267; unsigned short x2268; void*x2269; short x2270; void*x2271; void*x2272; void*x2273; void*x2274; unsigned long x2275; int x2276; unsigned int x2277/* : ? */; const void*x2278; const void*x2279; void*x2280; void*x2281; const int x2282; void x2283; void*x2284; void*x2285; void*x2286; void*x2287; const void*x2288; void*x2289; void*x2290; void*x2291; out const void*x2292; short x2293; void*x2294; void*x2295; void*x2296; void*x2297; void*x2298; void*x2299; int x2300; void*x2301; unsigned short x2302; void*x2303; const void x2304; int x2305; BOOL x2306; void*x2307; short x2308; void*x2309; float x2310; const void*x2311; void*x2312; void*x2313; void*x2314; out const void*x2315; void*x2316; void*x2317; const void*x2318; void*x2319; void*x2320; void*x2321; out const void*x2322; short x2323; void*x2324; void*x2325; unsigned char x2326; out in float x2327; void*x2328; const void*x2329; in BOOL x2330; void*x2331; void*x2332; float x2333; const void*x2334; void*x2335; void*x2336; void*x2337; out const void*x2338; void*x2339; void*x2340; unsigned char x2341; out in float x2342; void*x2343; const void*x2344; in BOOL x2345; void*x2346; void*x2347; void*x2348; void*x2349; void*x2350; void*x2351; void*x2352; void*x2353; void*x2354; void*x2355; void*x2356; long x2357; void*x2358; void*x2359; void*x2360; void*x2361; void*x2362; void*x2363; void*x2364; void*x2365; void*x2366; void*x2367; void*x2368; void*x2369; unsigned short x2370; void*x2371; short x2372; void*x2373; void*x2374; void*x2375; void*x2376; unsigned long x2377; int x2378; unsigned int x2379/* : ? */; const void*x2380; const void*x2381; void*x2382; void*x2383; const int x2384; void x2385; void*x2386; void*x2387; void*x2388; void*x2389; const void*x2390; void*x2391; void*x2392; void*x2393; out const void*x2394; short x2395; void*x2396; void*x2397; void*x2398; void*x2399; void*x2400; void*x2401; int x2402; void*x2403; unsigned short x2404; void*x2405; const void x2406; int x2407; BOOL x2408; void*x2409; short x2410; void*x2411; float x2412; const void*x2413; void*x2414; void*x2415; void*x2416; out const void*x2417; void*x2418; void*x2419; const void*x2420; void*x2421; void*x2422; void*x2423; out const void*x2424; short x2425; void*x2426; void*x2427; unsigned char x2428; out in float x2429; void*x2430; const void*x2431; in BOOL x2432; void*x2433; void*x2434; float x2435; const void*x2436; void*x2437; void*x2438; void*x2439; out const void*x2440; void*x2441; void*x2442; unsigned char x2443; out in float x2444; void*x2445; const void*x2446; in BOOL x2447; void*x2448; void*x2449; void*x2450; void*x2451; void*x2452; void*x2453; void*x2454; void*x2455; void*x2456; void*x2457; void*x2458; long x2459; void*x2460; void*x2461; void*x2462; void*x2463; void*x2464; void*x2465; void*x2466; void*x2467; void*x2468; void*x2469; void*x2470; void*x2471; unsigned short x2472; void*x2473; short x2474; void*x2475; void*x2476; void*x2477; void*x2478; unsigned long x2479; int x2480; unsigned int x2481/* : ? */; const void*x2482; const void*x2483; void*x2484; void*x2485; const int x2486; void x2487; void*x2488; void*x2489; void*x2490; void*x2491; const void*x2492; void*x2493; void*x2494; void*x2495; out const void*x2496; short x2497; void*x2498; void*x2499; void*x2500; void*x2501; void*x2502; void*x2503; int x2504; void*x2505; unsigned short x2506; void*x2507; const void x2508; int x2509; BOOL x2510; void*x2511; short x2512; void*x2513; float x2514; const void*x2515; void*x2516; void*x2517; void*x2518; out const void*x2519; void*x2520; void*x2521; const void*x2522; void*x2523; void*x2524; void*x2525; out const void*x2526; short x2527; void*x2528; void*x2529; unsigned char x2530; out in float x2531; void*x2532; const void*x2533; in BOOL x2534; void*x2535; void*x2536; float x2537; const void*x2538; void*x2539; void*x2540; void*x2541; out const void*x2542; void*x2543; void*x2544; unsigned char x2545; out in float x2546; void*x2547; const void*x2548; in BOOL x2549; void*x2550; void*x2551; void*x2552; void*x2553; void*x2554; void*x2555; void*x2556; void*x2557; void*x2558; void*x2559; void*x2560; void*x2561; void*x2562; void*x2563; void*x2564; void*x2565; void*x2566; void*x2567; void*x2568; void*x2569; void*x2570; void*x2571; BOOL x2572; void*x2573; short x2574; void*x2575; double x2576; SEL x2577; SEL x2578; void*x2579; void*x2580; void*x2581; SEL x2582; SEL x2583; void*x2584; long x2585; long x2586; out BOOL x2587; void*x2588; void*x2589; out const void*x2590; short x2591; void*x2592; double x2593; SEL x2594; SEL x2595; void*x2596; void*x2597; void*x2598; SEL x2599; SEL x2600; void*x2601; void*x2602; void*x2603; void*x2604; short x2605; void*x2606; void*x2607; in out double x2608; void*x2609; void*x2610; short x2611; void*x2612; double x2613; SEL x2614; SEL x2615; void*x2616; void*x2617; void*x2618; SEL x2619; SEL x2620; void*x2621; void*x2622; void*x2623; void*x2624; short x2625; void*x2626; void*x2627; void x2628; void*x2629; long x2630; void*x2631; void*x2632; void*x2633; void*x2634; void*x2635; void*x2636; void*x2637; void*x2638; short x2639; void*x2640; double x2641; SEL x2642; SEL x2643; void*x2644; void*x2645; void*x2646; SEL x2647; SEL x2648; unsigned int x2649/* : ? */; void*x2650; short x2651; int x2652; BOOL x2653; void*x2654; short x2655; void*x2656; const int x2657; in void*x2658; void*x2659; BOOL x2660; void*x2661; void*x2662; const void*x2663; void*x2664; void*x2665; void*x2666; void*x2667; void*x2668; void*x2669; void*x2670; void*x2671; void*x2672; void*x2673; void*x2674; void*x2675; void*x2676; void*x2677; void*x2678; void*x2679; void*x2680; long x2681; void*x2682; void*x2683; void*x2684; void*x2685; void*x2686; void*x2687; void*x2688; void*x2689; void*x2690; void*x2691; void*x2692; void*x2693; unsigned short x2694; void*x2695; short x2696; void*x2697; void*x2698; void*x2699; void*x2700; unsigned long x2701; int x2702; unsigned int x2703/* : ? */; const void*x2704; const void*x2705; void*x2706; void*x2707; const int x2708; void x2709; void*x2710; void*x2711; void*x2712; void*x2713; const void*x2714; void*x2715; void*x2716; void*x2717; out const void*x2718; short x2719; void*x2720; void*x2721; void*x2722; void*x2723; void*x2724; void*x2725; int x2726; void*x2727; unsigned short x2728; void*x2729; const void x2730; int x2731; BOOL x2732; void*x2733; short x2734; void*x2735; float x2736; const void*x2737; void*x2738; void*x2739; void*x2740; out const void*x2741; void*x2742; void*x2743; const void*x2744; void*x2745; void*x2746; void*x2747; out const void*x2748; short x2749; void*x2750; void*x2751; unsigned char x2752; out in float x2753; void*x2754; const void*x2755; in BOOL x2756; void*x2757; void*x2758; float x2759; const void*x2760; void*x2761; void*x2762; void*x2763; out const void*x2764; void*x2765; void*x2766; unsigned char x2767; out in float x2768; void*x2769; const void*x2770; in BOOL x2771; void*x2772; void*x2773; void*x2774; void*x2775; void*x2776; void*x2777; void*x2778; void*x2779; void*x2780; void*x2781; void*x2782; long x2783; void*x2784; void*x2785; void*x2786; void*x2787; inout void*x2788; void*x2789; void*x2790; void*x2791; void*x2792; void*x2793; void*x2794; unsigned short x2795; void*x2796; short x2797; void*x2798; void*x2799; void*x2800; void*x2801; unsigned long x2802; int x2803; unsigned int x2804/* : ? */; const void*x2805; const void*x2806; void*x2807; void*x2808; const int x2809; void x2810; void*x2811; void*x2812; void*x2813; void*x2814; const void*x2815; void*x2816; void*x2817; void*x2818; out const void*x2819; short x2820; void*x2821; void*x2822; void*x2823; void*x2824; void*x2825; void*x2826; int x2827; void*x2828; unsigned short x2829; void*x2830; const void x2831; int x2832; BOOL x2833; void*x2834; short x2835; void*x2836; float x2837; const void*x2838; void*x2839; void*x2840; void*x2841; out const void*x2842; void*x2843; void*x2844; const void*x2845; void*x2846; void*x2847; void*x2848; out const void*x2849; short x2850; void*x2851; void*x2852; unsigned char x2853; out in float x2854; void*x2855; const void*x2856; in BOOL x2857; void*x2858; void*x2859; float x2860; const void*x2861; void*x2862; void*x2863; void*x2864; out const void*x2865; void*x2866; void*x2867; unsigned char x2868; out in float x2869; void*x2870; const void*x2871; in BOOL x2872; void*x2873; void*x2874; void*x2875; void*x2876; void*x2877; void*x2878; void*x2879; void*x2880; void*x2881; void*x2882; void*x2883; long x2884; void*x2885; void*x2886; void*x2887; void*x2888; void*x2889; void*x2890; void*x2891; void*x2892; void*x2893; void*x2894; void*x2895; void*x2896; unsigned short x2897; void*x2898; short x2899; void*x2900; void*x2901; void*x2902; void*x2903; unsigned long x2904; int x2905; unsigned int x2906/* : ? */; const void*x2907; const void*x2908; void*x2909; void*x2910; const int x2911; void x2912; void*x2913; void*x2914; void*x2915; void*x2916; const void*x2917; void*x2918; void*x2919; void*x2920; out const void*x2921; short x2922; void*x2923; void*x2924; void*x2925; void*x2926; void*x2927; void*x2928; int x2929; void*x2930; unsigned short x2931; void*x2932; const void x2933; int x2934; BOOL x2935; void*x2936; short x2937; void*x2938; float x2939; const void*x2940; void*x2941; void*x2942; void*x2943; out const void*x2944; void*x2945; void*x2946; const void*x2947; void*x2948; void*x2949; void*x2950; out const void*x2951; short x2952; void*x2953; void*x2954; unsigned char x2955; out in float x2956; void*x2957; const void*x2958; in BOOL x2959; void*x2960; void*x2961; float x2962; const void*x2963; void*x2964; void*x2965; void*x2966; out const void*x2967; void*x2968; void*x2969; unsigned char x2970; out in float x2971; void*x2972; const void*x2973; in BOOL x2974; void*x2975; void*x2976; void*x2977; void*x2978; void*x2979; void*x2980; void*x2981; void*x2982; void*x2983; void*x2984; void*x2985; long x2986; void*x2987; void*x2988; void*x2989; }*entityClass; /* unknown property attribute:  true> >=f}}}} */
@property (nonatomic, copy) id /* block */ entityQueryBlock;
@property (getter=isTransient, nonatomic, readonly) bool transient;

+ (struct EntityClass { int (**x1)(); struct mutex { struct _opaque_pthread_mutex_t { long long x_1_2_1; BOOL x_1_2_2[56]; } x_2_1_1; } x2; struct unordered_map<std::__1::basic_string<char>, mlcore::ModelPropertyBase *, std::__1::hash<std::__1::basic_string<char> >, std::__1::equal_to<std::__1::basic_string<char> >, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, mlcore::ModelPropertyBase *> > > { struct __hash_table<std::__1::__hash_value_type<std::__1::basic_string<char>, mlcore::ModelPropertyBase *>, std::__1::__unordered_map_hasher<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, mlcore::ModelPropertyBase *>, std::__1::hash<std::__1::basic_string<char> >, true>, std::__1::__unordered_map_equal<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, mlcore::ModelPropertyBase *>, std::__1::equal_to<std::__1::basic_string<char> >, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::basic_string<char>, mlcore::ModelPropertyBase *> > > { struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, mlcore::ModelPropertyBase *>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, mlcore::ModelPropertyBase *>, void *> *> > > { struct __compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, mlcore::ModelPropertyBase *>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, mlcore::ModelPropertyBase *>, void *> *> > > { struct __hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, mlcore::ModelPropertyBase *>, void *> {} **x_1_4_1; struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, mlcore::ModelPropertyBase *>, void *> *> > { struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, mlcore::ModelPropertyBase *>, void *> *> > { unsigned long long x_1_6_1; } x_2_5_1; } x_1_4_2; } x_1_3_1; } x_1_2_1; struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, mlcore::ModelPropertyBase *>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, mlcore::ModelPropertyBase *>, void *> > > { struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, mlcore::ModelPropertyBase *>, void *> *> { struct __hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, mlcore::ModelPropertyBase *>, void *> {} *x_1_4_1; } x_2_3_1; } x_1_2_2; struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, mlcore::ModelPropertyBase *>, std::__1::hash<std::__1::basic_string<char> >, true> > { unsigned long long x_3_3_1; } x_1_2_3; struct __compressed_pair<float, std::__1::__unordered_map_equal<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, mlcore::ModelPropertyBase *>, std::__1::equal_to<std::__1::basic_string<char> >, true> > { float x_4_3_1; } x_1_2_4; } x_3_1_1; } x3; struct unordered_map<mlcore::ModelPropertyBase *, mlcore::EntityClass *, std::__1::hash<mlcore::ModelPropertyBase *>, std::__1::equal_to<mlcore::ModelPropertyBase *>, std::__1::allocator<std::__1::pair<mlcore::ModelPropertyBase *const, mlcore::EntityClass *> > > { struct __hash_table<std::__1::__hash_value_type<mlcore::ModelPropertyBase *, mlcore::EntityClass *>, std::__1::__unordered_map_hasher<mlcore::ModelPropertyBase *, std::__1::__hash_value_type<mlcore::ModelPropertyBase *, mlcore::EntityClass *>, std::__1::hash<mlcore::ModelPropertyBase *>, true>, std::__1::__unordered_map_equal<mlcore::ModelPropertyBase *, std::__1::__hash_value_type<mlcore::ModelPropertyBase *, mlcore::EntityClass *>, std::__1::equal_to<mlcore::ModelPropertyBase *>, true>, std::__1::allocator<std::__1::__hash_value_type<mlcore::ModelPropertyBase *, mlcore::EntityClass *> > > { struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<mlcore::ModelPropertyBase *, mlcore::EntityClass *>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<mlcore::ModelPropertyBase *, mlcore::EntityClass *>, void *> *> > > { struct __compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<mlcore::ModelPropertyBase *, mlcore::EntityClass *>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<mlcore::ModelPropertyBase *, mlcore::EntityClass *>, void *> *> > > { struct __hash_node<std::__1::__hash_value_type<mlcore::ModelPropertyBase *, mlcore::EntityClass *>, void *> {} **x_1_4_1; struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<mlcore::ModelPropertyBase *, mlcore::EntityClass *>, void *> *> > { struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<mlcore::ModelPropertyBase *, mlcore::EntityClass *>, void *> *> > { unsigned long long x_1_6_1; } x_2_5_1; } x_1_4_2; } x_1_3_1; } x_1_2_1; struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<mlcore::ModelPropertyBase *, mlcore::EntityClass *>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<mlcore::ModelPropertyBase *, mlcore::EntityClass *>, void *> > > { struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<mlcore::ModelPropertyBase *, mlcore::EntityClass *>, void *> *> { struct __hash_node<std::__1::__hash_value_type<mlcore::ModelPropertyBase *, mlcore::EntityClass *>, void *> {} *x_1_4_1; } x_2_3_1; } x_1_2_2; struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<mlcore::ModelPropertyBase *, std::__1::__hash_value_type<mlcore::ModelPropertyBase *, mlcore::EntityClass *>, std::__1::hash<mlcore::ModelPropertyBase *>, true> > { unsigned long long x_3_3_1; } x_1_2_3; struct __compressed_pair<float, std::__1::__unordered_map_equal<mlcore::ModelPropertyBase *, std::__1::__hash_value_type<mlcore::ModelPropertyBase *, mlcore::EntityClass *>, std::__1::equal_to<mlcore::ModelPropertyBase *>, true> > { float x_4_3_1; } x_1_2_4; } x_4_1_1; } x4; }*)MLCoreEntityClassForModelEntityClass:(Class)arg1;
+ (id)_translatorForMPModelClass:(Class)arg1 mlcoreEntityClass:(struct EntityClass { int (**x1)(); struct mutex { struct _opaque_pthread_mutex_t { long long x_1_2_1; BOOL x_1_2_2[56]; } x_2_1_1; } x2; struct unordered_map<std::__1::basic_string<char>, mlcore::ModelPropertyBase *, std::__1::hash<std::__1::basic_string<char> >, std::__1::equal_to<std::__1::basic_string<char> >, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, mlcore::ModelPropertyBase *> > > { struct __hash_table<std::__1::__hash_value_type<std::__1::basic_string<char>, mlcore::ModelPropertyBase *>, std::__1::__unordered_map_hasher<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, mlcore::ModelPropertyBase *>, std::__1::hash<std::__1::basic_string<char> >, true>, std::__1::__unordered_map_equal<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, mlcore::ModelPropertyBase *>, std::__1::equal_to<std::__1::basic_string<char> >, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::basic_string<char>, mlcore::ModelPropertyBase *> > > { struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, mlcore::ModelPropertyBase *>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, mlcore::ModelPropertyBase *>, void *> *> > > { struct __compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, mlcore::ModelPropertyBase *>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, mlcore::ModelPropertyBase *>, void *> *> > > { struct __hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, mlcore::ModelPropertyBase *>, void *> {} **x_1_4_1; struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, mlcore::ModelPropertyBase *>, void *> *> > { struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, mlcore::ModelPropertyBase *>, void *> *> > { unsigned long long x_1_6_1; } x_2_5_1; } x_1_4_2; } x_1_3_1; } x_1_2_1; struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, mlcore::ModelPropertyBase *>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, mlcore::ModelPropertyBase *>, void *> > > { struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, mlcore::ModelPropertyBase *>, void *> *> { struct __hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, mlcore::ModelPropertyBase *>, void *> {} *x_1_4_1; } x_2_3_1; } x_1_2_2; struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, mlcore::ModelPropertyBase *>, std::__1::hash<std::__1::basic_string<char> >, true> > { unsigned long long x_3_3_1; } x_1_2_3; struct __compressed_pair<float, std::__1::__unordered_map_equal<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, mlcore::ModelPropertyBase *>, std::__1::equal_to<std::__1::basic_string<char> >, true> > { float x_4_3_1; } x_1_2_4; } x_3_1_1; } x3; struct unordered_map<mlcore::ModelPropertyBase *, mlcore::EntityClass *, std::__1::hash<mlcore::ModelPropertyBase *>, std::__1::equal_to<mlcore::ModelPropertyBase *>, std::__1::allocator<std::__1::pair<mlcore::ModelPropertyBase *const, mlcore::EntityClass *> > > { struct __hash_table<std::__1::__hash_value_type<mlcore::ModelPropertyBase *, mlcore::EntityClass *>, std::__1::__unordered_map_hasher<mlcore::ModelPropertyBase *, std::__1::__hash_value_type<mlcore::ModelPropertyBase *, mlcore::EntityClass *>, std::__1::hash<mlcore::ModelPropertyBase *>, true>, std::__1::__unordered_map_equal<mlcore::ModelPropertyBase *, std::__1::__hash_value_type<mlcore::ModelPropertyBase *, mlcore::EntityClass *>, std::__1::equal_to<mlcore::ModelPropertyBase *>, true>, std::__1::allocator<std::__1::__hash_value_type<mlcore::ModelPropertyBase *, mlcore::EntityClass *> > > { struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<mlcore::ModelPropertyBase *, mlcore::EntityClass *>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<mlcore::ModelPropertyBase *, mlcore::EntityClass *>, void *> *> > > { struct __compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<mlcore::ModelPropertyBase *, mlcore::EntityClass *>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<mlcore::ModelPropertyBase *, mlcore::EntityClass *>, void *> *> > > { struct __hash_node<std::__1::__hash_value_type<mlcore::ModelPropertyBase *, mlcore::EntityClass *>, void *> {} **x_1_4_1; struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<mlcore::ModelPropertyBase *, mlcore::EntityClass *>, void *> *> > { struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<mlcore::ModelPropertyBase *, mlcore::EntityClass *>, void *> *> > { unsigned long long x_1_6_1; } x_2_5_1; } x_1_4_2; } x_1_3_1; } x_1_2_1; struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<mlcore::ModelPropertyBase *, mlcore::EntityClass *>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<mlcore::ModelPropertyBase *, mlcore::EntityClass *>, void *> > > { struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<mlcore::ModelPropertyBase *, mlcore::EntityClass *>, void *> *> { struct __hash_node<std::__1::__hash_value_type<mlcore::ModelPropertyBase *, mlcore::EntityClass *>, void *> {} *x_1_4_1; } x_2_3_1; } x_1_2_2; struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<mlcore::ModelPropertyBase *, std::__1::__hash_value_type<mlcore::ModelPropertyBase *, mlcore::EntityClass *>, std::__1::hash<mlcore::ModelPropertyBase *>, true> > { unsigned long long x_3_3_1; } x_1_2_3; struct __compressed_pair<float, std::__1::__unordered_map_equal<mlcore::ModelPropertyBase *, std::__1::__hash_value_type<mlcore::ModelPropertyBase *, mlcore::EntityClass *>, std::__1::equal_to<mlcore::ModelPropertyBase *>, true> > { float x_4_3_1; } x_1_2_4; } x_4_1_1; } x4; }*)arg2 create:(bool)arg3 transient:(bool)arg4;
+ (id)translatorForMPModelClass:(Class)arg1;
+ (id)translatorForMPModelClass:(Class)arg1 mlcoreEntityClass:(struct EntityClass { int (**x1)(); struct mutex { struct _opaque_pthread_mutex_t { long long x_1_2_1; BOOL x_1_2_2[56]; } x_2_1_1; } x2; struct unordered_map<std::__1::basic_string<char>, mlcore::ModelPropertyBase *, std::__1::hash<std::__1::basic_string<char> >, std::__1::equal_to<std::__1::basic_string<char> >, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, mlcore::ModelPropertyBase *> > > { struct __hash_table<std::__1::__hash_value_type<std::__1::basic_string<char>, mlcore::ModelPropertyBase *>, std::__1::__unordered_map_hasher<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, mlcore::ModelPropertyBase *>, std::__1::hash<std::__1::basic_string<char> >, true>, std::__1::__unordered_map_equal<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, mlcore::ModelPropertyBase *>, std::__1::equal_to<std::__1::basic_string<char> >, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::basic_string<char>, mlcore::ModelPropertyBase *> > > { struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, mlcore::ModelPropertyBase *>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, mlcore::ModelPropertyBase *>, void *> *> > > { struct __compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, mlcore::ModelPropertyBase *>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, mlcore::ModelPropertyBase *>, void *> *> > > { struct __hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, mlcore::ModelPropertyBase *>, void *> {} **x_1_4_1; struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, mlcore::ModelPropertyBase *>, void *> *> > { struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, mlcore::ModelPropertyBase *>, void *> *> > { unsigned long long x_1_6_1; } x_2_5_1; } x_1_4_2; } x_1_3_1; } x_1_2_1; struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, mlcore::ModelPropertyBase *>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, mlcore::ModelPropertyBase *>, void *> > > { struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, mlcore::ModelPropertyBase *>, void *> *> { struct __hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, mlcore::ModelPropertyBase *>, void *> {} *x_1_4_1; } x_2_3_1; } x_1_2_2; struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, mlcore::ModelPropertyBase *>, std::__1::hash<std::__1::basic_string<char> >, true> > { unsigned long long x_3_3_1; } x_1_2_3; struct __compressed_pair<float, std::__1::__unordered_map_equal<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, mlcore::ModelPropertyBase *>, std::__1::equal_to<std::__1::basic_string<char> >, true> > { float x_4_3_1; } x_1_2_4; } x_3_1_1; } x3; struct unordered_map<mlcore::ModelPropertyBase *, mlcore::EntityClass *, std::__1::hash<mlcore::ModelPropertyBase *>, std::__1::equal_to<mlcore::ModelPropertyBase *>, std::__1::allocator<std::__1::pair<mlcore::ModelPropertyBase *const, mlcore::EntityClass *> > > { struct __hash_table<std::__1::__hash_value_type<mlcore::ModelPropertyBase *, mlcore::EntityClass *>, std::__1::__unordered_map_hasher<mlcore::ModelPropertyBase *, std::__1::__hash_value_type<mlcore::ModelPropertyBase *, mlcore::EntityClass *>, std::__1::hash<mlcore::ModelPropertyBase *>, true>, std::__1::__unordered_map_equal<mlcore::ModelPropertyBase *, std::__1::__hash_value_type<mlcore::ModelPropertyBase *, mlcore::EntityClass *>, std::__1::equal_to<mlcore::ModelPropertyBase *>, true>, std::__1::allocator<std::__1::__hash_value_type<mlcore::ModelPropertyBase *, mlcore::EntityClass *> > > { struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<mlcore::ModelPropertyBase *, mlcore::EntityClass *>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<mlcore::ModelPropertyBase *, mlcore::EntityClass *>, void *> *> > > { struct __compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<mlcore::ModelPropertyBase *, mlcore::EntityClass *>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<mlcore::ModelPropertyBase *, mlcore::EntityClass *>, void *> *> > > { struct __hash_node<std::__1::__hash_value_type<mlcore::ModelPropertyBase *, mlcore::EntityClass *>, void *> {} **x_1_4_1; struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<mlcore::ModelPropertyBase *, mlcore::EntityClass *>, void *> *> > { struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<mlcore::ModelPropertyBase *, mlcore::EntityClass *>, void *> *> > { unsigned long long x_1_6_1; } x_2_5_1; } x_1_4_2; } x_1_3_1; } x_1_2_1; struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<mlcore::ModelPropertyBase *, mlcore::EntityClass *>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<mlcore::ModelPropertyBase *, mlcore::EntityClass *>, void *> > > { struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<mlcore::ModelPropertyBase *, mlcore::EntityClass *>, void *> *> { struct __hash_node<std::__1::__hash_value_type<mlcore::ModelPropertyBase *, mlcore::EntityClass *>, void *> {} *x_1_4_1; } x_2_3_1; } x_1_2_2; struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<mlcore::ModelPropertyBase *, std::__1::__hash_value_type<mlcore::ModelPropertyBase *, mlcore::EntityClass *>, std::__1::hash<mlcore::ModelPropertyBase *>, true> > { unsigned long long x_3_3_1; } x_1_2_3; struct __compressed_pair<float, std::__1::__unordered_map_equal<mlcore::ModelPropertyBase *, std::__1::__hash_value_type<mlcore::ModelPropertyBase *, mlcore::EntityClass *>, std::__1::equal_to<mlcore::ModelPropertyBase *>, true> > { float x_4_3_1; } x_1_2_4; } x_4_1_1; } x4; }*)arg2;
+ (id)translatorForTransientMPModelClass:(Class)arg1;

- (void).cxx_destruct;
- (struct vector<mlcore::ModelPropertyBase *, std::__1::allocator<mlcore::ModelPropertyBase *> > { struct ModelPropertyBase {} **x1; struct ModelPropertyBase {} **x2; struct __compressed_pair<mlcore::ModelPropertyBase **, std::__1::allocator<mlcore::ModelPropertyBase *> > { struct ModelPropertyBase {} **x_3_1_1; } x3; })MLCorePropertiesForPropertySet:(id)arg1;
- (struct vector<mlcore::ModelPropertyBase *, std::__1::allocator<mlcore::ModelPropertyBase *> > { struct ModelPropertyBase {} **x1; struct ModelPropertyBase {} **x2; struct __compressed_pair<mlcore::ModelPropertyBase **, std::__1::allocator<mlcore::ModelPropertyBase *> > { struct ModelPropertyBase {} **x_3_1_1; } x3; })MLCorePropertiesForPropertySet:(id)arg1 withForeignPropertyBase:(struct ModelPropertyBase { int (**x1)(); struct EntityClass {} *x2; struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > { struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> > { struct __rep { union { struct __long { char *x_1_5_1; unsigned long long x_1_5_2; unsigned long long x_1_5_3; } x_1_4_1; struct __short { BOOL x_2_5_1[23]; struct { unsigned char x_2_6_1; } x_2_5_2; } x_1_4_2; struct __raw { unsigned long long x_3_5_1[3]; } x_1_4_3; } x_1_3_1; } x_1_2_1; } x_3_1_1; } x3; }*)arg2;
- (struct vector<mlcore::SortDescriptor, std::__1::allocator<mlcore::SortDescriptor> > { struct SortDescriptor {} *x1; struct SortDescriptor {} *x2; struct __compressed_pair<mlcore::SortDescriptor *, std::__1::allocator<mlcore::SortDescriptor> > { struct SortDescriptor {} *x_3_1_1; } x3; })MLCoreSortDescriptorsForModelSortDescriptors:(id)arg1;
- (Class)MPModelClass;
- (struct ModelPropertyBase { int (**x1)(); struct EntityClass {} *x2; struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > { struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> > { struct __rep { union { struct __long { char *x_1_5_1; unsigned long long x_1_5_2; unsigned long long x_1_5_3; } x_1_4_1; struct __short { BOOL x_2_5_1[23]; struct { unsigned char x_2_6_1; } x_2_5_2; } x_1_4_2; struct __raw { unsigned long long x_3_5_1[3]; } x_1_4_3; } x_1_3_1; } x_1_2_1; } x_3_1_1; } x3; }*)_propertyForKeyPath:(id)arg1;
- (struct map<std::__1::basic_string<char>, mlcore::ModelPropertyBase *, std::__1::less<std::__1::basic_string<char> >, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, mlcore::ModelPropertyBase *> > > { struct __tree<std::__1::__value_type<std::__1::basic_string<char>, mlcore::ModelPropertyBase *>, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, mlcore::ModelPropertyBase *>, std::__1::less<std::__1::basic_string<char> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char>, mlcore::ModelPropertyBase *> > > { struct __tree_node<std::__1::__value_type<std::__1::basic_string<char>, mlcore::ModelPropertyBase *>, void *> {} *x_1_1_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char>, mlcore::ModelPropertyBase *>, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_3_1; } x_2_2_1; } x_1_1_2; struct __compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, mlcore::ModelPropertyBase *>, std::__1::less<std::__1::basic_string<char> >, true> > { unsigned long long x_3_2_1; } x_1_1_3; } x1; })_propertyMapForKeyPath:(id)arg1 includePropertiesToSort:(bool)arg2;
- (id)_propertyTranslatorForKeyPath:(id)arg1;
- (id /* block */)allowedItemPredicatesBlock;
- (Class)classForRelationshipKey:(id)arg1;
- (struct EntityClass { int (**x1)(); struct mutex { struct _opaque_pthread_mutex_t { long long x_1_2_1; BOOL x_1_2_2[56]; } x_2_1_1; } x2; struct unordered_map<std::__1::basic_string<char>, mlcore::ModelPropertyBase *, std::__1::hash<std::__1::basic_string<char> >, std::__1::equal_to<std::__1::basic_string<char> >, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, mlcore::ModelPropertyBase *> > > { struct __hash_table<std::__1::__hash_value_type<std::__1::basic_string<char>, mlcore::ModelPropertyBase *>, std::__1::__unordered_map_hasher<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, mlcore::ModelPropertyBase *>, std::__1::hash<std::__1::basic_string<char> >, true>, std::__1::__unordered_map_equal<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, mlcore::ModelPropertyBase *>, std::__1::equal_to<std::__1::basic_string<char> >, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::basic_string<char>, mlcore::ModelPropertyBase *> > > { struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, mlcore::ModelPropertyBase *>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, mlcore::ModelPropertyBase *>, void *> *> > > { struct __compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, mlcore::ModelPropertyBase *>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, mlcore::ModelPropertyBase *>, void *> *> > > { struct __hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, mlcore::ModelPropertyBase *>, void *> {} **x_1_4_1; struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, mlcore::ModelPropertyBase *>, void *> *> > { struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, mlcore::ModelPropertyBase *>, void *> *> > { unsigned long long x_1_6_1; } x_2_5_1; } x_1_4_2; } x_1_3_1; } x_1_2_1; struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, mlcore::ModelPropertyBase *>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, mlcore::ModelPropertyBase *>, void *> > > { struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, mlcore::ModelPropertyBase *>, void *> *> { struct __hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, mlcore::ModelPropertyBase *>, void *> {} *x_1_4_1; } x_2_3_1; } x_1_2_2; struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, mlcore::ModelPropertyBase *>, std::__1::hash<std::__1::basic_string<char> >, true> > { unsigned long long x_3_3_1; } x_1_2_3; struct __compressed_pair<float, std::__1::__unordered_map_equal<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, mlcore::ModelPropertyBase *>, std::__1::equal_to<std::__1::basic_string<char> >, true> > { float x_4_3_1; } x_1_2_4; } x_3_1_1; } x3; struct unordered_map<mlcore::ModelPropertyBase *, mlcore::EntityClass *, std::__1::hash<mlcore::ModelPropertyBase *>, std::__1::equal_to<mlcore::ModelPropertyBase *>, std::__1::allocator<std::__1::pair<mlcore::ModelPropertyBase *const, mlcore::EntityClass *> > > { struct __hash_table<std::__1::__hash_value_type<mlcore::ModelPropertyBase *, mlcore::EntityClass *>, std::__1::__unordered_map_hasher<mlcore::ModelPropertyBase *, std::__1::__hash_value_type<mlcore::ModelPropertyBase *, mlcore::EntityClass *>, std::__1::hash<mlcore::ModelPropertyBase *>, true>, std::__1::__unordered_map_equal<mlcore::ModelPropertyBase *, std::__1::__hash_value_type<mlcore::ModelPropertyBase *, mlcore::EntityClass *>, std::__1::equal_to<mlcore::ModelPropertyBase *>, true>, std::__1::allocator<std::__1::__hash_value_type<mlcore::ModelPropertyBase *, mlcore::EntityClass *> > > { struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<mlcore::ModelPropertyBase *, mlcore::EntityClass *>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<mlcore::ModelPropertyBase *, mlcore::EntityClass *>, void *> *> > > { struct __compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<mlcore::ModelPropertyBase *, mlcore::EntityClass *>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<mlcore::ModelPropertyBase *, mlcore::EntityClass *>, void *> *> > > { struct __hash_node<std::__1::__hash_value_type<mlcore::ModelPropertyBase *, mlcore::EntityClass *>, void *> {} **x_1_4_1; struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<mlcore::ModelPropertyBase *, mlcore::EntityClass *>, void *> *> > { struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<mlcore::ModelPropertyBase *, mlcore::EntityClass *>, void *> *> > { unsigned long long x_1_6_1; } x_2_5_1; } x_1_4_2; } x_1_3_1; } x_1_2_1; struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<mlcore::ModelPropertyBase *, mlcore::EntityClass *>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<mlcore::ModelPropertyBase *, mlcore::EntityClass *>, void *> > > { struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<mlcore::ModelPropertyBase *, mlcore::EntityClass *>, void *> *> { struct __hash_node<std::__1::__hash_value_type<mlcore::ModelPropertyBase *, mlcore::EntityClass *>, void *> {} *x_1_4_1; } x_2_3_1; } x_1_2_2; struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<mlcore::ModelPropertyBase *, std::__1::__hash_value_type<mlcore::ModelPropertyBase *, mlcore::EntityClass *>, std::__1::hash<mlcore::ModelPropertyBase *>, true> > { unsigned long long x_3_3_1; } x_1_2_3; struct __compressed_pair<float, std::__1::__unordered_map_equal<mlcore::ModelPropertyBase *, std::__1::__hash_value_type<mlcore::ModelPropertyBase *, mlcore::EntityClass *>, std::__1::equal_to<mlcore::ModelPropertyBase *>, true> > { float x_4_3_1; } x_1_2_4; } x_4_1_1; } x4; }*)entityClass;
- (id /* block */)entityQueryBlock;
- (struct shared_ptr<mlcore::EntityQuery> { struct EntityQuery {} *x1; struct __shared_weak_count {} *x2; })entityQueryForPropertySet:(id)arg1 sortDescriptors:(id)arg2 context:(id)arg3 predicate:(struct shared_ptr<mlcore::Predicate> { struct Predicate {} *x1; struct __shared_weak_count {} *x2; })arg4;
- (id)identifiersForEntity:(struct shared_ptr<mlcore::Entity> { struct Entity {} *x1; struct __shared_weak_count {} *x2; })arg1;
- (bool)isTransient;
- (void)mapIdentifierMLProperties:(const struct map<std::__1::basic_string<char>, mlcore::ModelPropertyBase *, std::__1::less<std::__1::basic_string<char> >, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, mlcore::ModelPropertyBase *> > > { struct __tree<std::__1::__value_type<std::__1::basic_string<char>, mlcore::ModelPropertyBase *>, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, mlcore::ModelPropertyBase *>, std::__1::less<std::__1::basic_string<char> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char>, mlcore::ModelPropertyBase *> > > { struct __tree_node<std::__1::__value_type<std::__1::basic_string<char>, mlcore::ModelPropertyBase *>, void *> {} *x_1_1_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char>, mlcore::ModelPropertyBase *>, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_3_1; } x_2_2_1; } x_1_1_2; struct __compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, mlcore::ModelPropertyBase *>, std::__1::less<std::__1::basic_string<char> >, true> > { unsigned long long x_3_2_1; } x_1_1_3; } x1; }*)arg1 identifierCreationBlock:(id /* block */)arg2;
- (void)mapPropertyKey:(id)arg1 toMLProperty:(struct ModelPropertyBase { int (**x1)(); struct EntityClass {} *x2; struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > { struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> > { struct __rep { union { struct __long { char *x_1_5_1; unsigned long long x_1_5_2; unsigned long long x_1_5_3; } x_1_4_1; struct __short { BOOL x_2_5_1[23]; struct { unsigned char x_2_6_1; } x_2_5_2; } x_1_4_2; struct __raw { unsigned long long x_3_5_1[3]; } x_1_4_3; } x_1_3_1; } x_1_2_1; } x_3_1_1; } x3; }*)arg2;
- (void)mapPropertyKey:(id)arg1 withPropertiesToFetch:(const struct map<std::__1::basic_string<char>, mlcore::ModelPropertyBase *, std::__1::less<std::__1::basic_string<char> >, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, mlcore::ModelPropertyBase *> > > { struct __tree<std::__1::__value_type<std::__1::basic_string<char>, mlcore::ModelPropertyBase *>, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, mlcore::ModelPropertyBase *>, std::__1::less<std::__1::basic_string<char> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char>, mlcore::ModelPropertyBase *> > > { struct __tree_node<std::__1::__value_type<std::__1::basic_string<char>, mlcore::ModelPropertyBase *>, void *> {} *x_1_1_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char>, mlcore::ModelPropertyBase *>, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_3_1; } x_2_2_1; } x_1_1_2; struct __compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, mlcore::ModelPropertyBase *>, std::__1::less<std::__1::basic_string<char> >, true> > { unsigned long long x_3_2_1; } x_1_1_3; } x1; }*)arg2 propertiesToSort:(const struct map<std::__1::basic_string<char>, mlcore::ModelPropertyBase *, std::__1::less<std::__1::basic_string<char> >, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, mlcore::ModelPropertyBase *> > > { struct __tree<std::__1::__value_type<std::__1::basic_string<char>, mlcore::ModelPropertyBase *>, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, mlcore::ModelPropertyBase *>, std::__1::less<std::__1::basic_string<char> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char>, mlcore::ModelPropertyBase *> > > { struct __tree_node<std::__1::__value_type<std::__1::basic_string<char>, mlcore::ModelPropertyBase *>, void *> {} *x_1_1_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char>, mlcore::ModelPropertyBase *>, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_3_1; } x_2_2_1; } x_1_1_2; struct __compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, mlcore::ModelPropertyBase *>, std::__1::less<std::__1::basic_string<char> >, true> > { unsigned long long x_3_2_1; } x_1_1_3; } x1; }*)arg3 sortTransformer:(id /* block */)arg4 valueTransformer:(id /* block */)arg5;
- (void)mapPropertyKey:(id)arg1 withPropertiesToFetch:(const struct map<std::__1::basic_string<char>, mlcore::ModelPropertyBase *, std::__1::less<std::__1::basic_string<char> >, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, mlcore::ModelPropertyBase *> > > { struct __tree<std::__1::__value_type<std::__1::basic_string<char>, mlcore::ModelPropertyBase *>, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, mlcore::ModelPropertyBase *>, std::__1::less<std::__1::basic_string<char> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char>, mlcore::ModelPropertyBase *> > > { struct __tree_node<std::__1::__value_type<std::__1::basic_string<char>, mlcore::ModelPropertyBase *>, void *> {} *x_1_1_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char>, mlcore::ModelPropertyBase *>, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_3_1; } x_2_2_1; } x_1_1_2; struct __compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, mlcore::ModelPropertyBase *>, std::__1::less<std::__1::basic_string<char> >, true> > { unsigned long long x_3_2_1; } x_1_1_3; } x1; }*)arg2 valueTransformer:(id /* block */)arg3;
- (void)mapRelationshipKey:(id)arg1 toModelClass:(Class)arg2 transient:(bool)arg3 usingForeignPropertyBase:(struct ModelPropertyBase { int (**x1)(); struct EntityClass {} *x2; struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > { struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> > { struct __rep { union { struct __long { char *x_1_5_1; unsigned long long x_1_5_2; unsigned long long x_1_5_3; } x_1_4_1; struct __short { BOOL x_2_5_1[23]; struct { unsigned char x_2_6_1; } x_2_5_2; } x_1_4_2; struct __raw { unsigned long long x_3_5_1[3]; } x_1_4_3; } x_1_3_1; } x_1_2_1; } x_3_1_1; } x3; }*)arg4;
- (void)mapRelationshipKey:(id)arg1 toModelClass:(Class)arg2 usingForeignPropertyBase:(struct ModelPropertyBase { int (**x1)(); struct EntityClass {} *x2; struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > { struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> > { struct __rep { union { struct __long { char *x_1_5_1; unsigned long long x_1_5_2; unsigned long long x_1_5_3; } x_1_4_1; struct __short { BOOL x_2_5_1[23]; struct { unsigned char x_2_6_1; } x_2_5_2; } x_1_4_2; struct __raw { unsigned long long x_3_5_1[3]; } x_1_4_3; } x_1_3_1; } x_1_2_1; } x_3_1_1; } x3; }*)arg3;
- (id)objectForPropertySet:(id)arg1 entity:(struct shared_ptr<mlcore::Entity> { struct Entity {} *x1; struct __shared_weak_count {} *x2; })arg2 baseTranslator:(id)arg3 prependKeyPath:(id)arg4 context:(id)arg5;
- (id)objectForPropertySet:(id)arg1 entity:(struct shared_ptr<mlcore::Entity> { struct Entity {} *x1; struct __shared_weak_count {} *x2; })arg2 context:(id)arg3;
- (struct shared_ptr<mlcore::PropertiesQuery> { struct PropertiesQuery {} *x1; struct __shared_weak_count {} *x2; })propertiesQueryForPropertySet:(id)arg1 sortDescriptors:(id)arg2 scopedContainers:(id)arg3 allowedItemIdentifiers:(id)arg4 predicate:(struct shared_ptr<mlcore::Predicate> { struct Predicate {} *x1; struct __shared_weak_count {} *x2; })arg5;
- (void)setAllowedItemPredicatesBlock:(id /* block */)arg1;
- (void)setEntityQueryBlock:(id /* block */)arg1;
- (id)valueForKeyPath:(id)arg1 forEntity:(struct shared_ptr<mlcore::Entity> { struct Entity {} *x1; struct __shared_weak_count {} *x2; })arg2 context:(id)arg3;

@end
